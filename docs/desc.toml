# Algorithm
[divide-and-conquer]
title = "Divider-and-Conquer"
description = "A divide-and-conquer approach breaks the problem into several subproblems that are similar to the original problem but smaller in size, solve the subproblems recursively, and then combine these solutions to create a solution to the original problem."
[dp]
title = "Dynamic Programming"
description = "Dynamic programming, like the divide-and-conquer method, solves problems by combining the solutions to subproblems. A dynamic-programming algorithm solves each subproblem just once and then saves its answer in a table, thereby avoiding the work of recomputing the answer every time it solves each subproblem."
[bitmask-dp]
title = "Bitmask Dynamic Programming"
description = ""
[digit-dp]
title = "Dynamic Progrmming on Digits"
description = ""
[tree-based-dp]
title = "Tree-based Dynamic Programming"
description = ""
[dp-optimization]
title = "Dynamic Programming Optimization"
description = ""

[greedy]
title = "Greedy Algorithm"
description = "A greedy algorithm always makes the choice that looks best at the moment. That is, it makes a locally optimal choice in the hope that this choice will lead to a globally optimal solution."

["data structures"]
title = "Date Structures"
description = "A data structure is a way to store and organize data in order to facilitate access and modifications. No single data structure works well for all purposes, and so it is important to know the strengths and limitations of several of them. Basic data structures include stack, queue, heap, hash table, binary search tree. More complicate ones include binary indexed tree, sparse table, disjoint set, persistent data structures."
["segment-tree"]
title = "Segment Tree"
description = "A Segment Tree is a data structure that allows answering range queries over an array effectively, while still being flexible enough to allow modifying the array."

[search]
title = "Search"
description = "In computer science, a search algorithm is any algorithm which solves the search problem, namely, to retrieve information stored within some data structure, or calculated in the search space of a problem domain, either with discrete or continuous values. Typical search algorithms include DFS, BFS, A*, IDA*, dancing links."
[dfs]
title = "Depth-first Search"
description = """The strategy followed by depth-first search is, as its name implies, to search "deeper" in the graph whenever possible. Depth-first search explores edges out of the most recently discovered vertexv that still has unexplored edges leaving it.Once all of v's edges have been explored, the search "backtracks" to explore edges leaving the vertex from which v was discovered. This process continues until we have discovered all the vertices that are reachable from the original source vertex."""
[bfs]
title = "Breadth-first Search"
description = "Breadth-first search expands the frontier between discovered and undiscovered vertices uniformly across the breadth of the frontier. That is, the algorithm discovers all vertices at distance k from s before discovering any vertices at distance k+1."

[tricks]
title = "Tricks"
description = ""

["number theory"]
title = "Number theory"
description = ""
[Bezout]
title = "Bezout's lemma"
description = ""
[CRT]
title = "Chinese Remainder Theorem"
description = ""
[Lucas]
title = "Lucas's theorem"
description = ""

[combinatorics]
title = "Combinatorics"
description = ""
[catalan-numbers]
title = "Catalan Numbers"
description = ""
[stirling-numbers]
title = "Stirling Numbers"
description = ""

# Course
[notes]
title = "Notes"
description = ""
[math]
title = "Math"
description = ""
[computer-network]
title = "Computer Networking"
description = ""
[operating-system]
title = "Operating System"
description = ""
[machine-learning]
title = "Maching Learning"
description = ""
[probability]
title = "Probability"
description = ""
[graph]
title = "Graph"
description = ""
[cpp]
title = "C Plus Plus"
description = ""
