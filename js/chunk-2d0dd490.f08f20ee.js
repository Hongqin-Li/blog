(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0dd490"],{8178:function(t){t.exports=JSON.parse('{"data":"2020-05-06","date":"<built-in method date of datetime.datetime object at 0x7fe940e4b1b0>","html":"<h2 id=\\"_1\\">第九周</h2>\\n<p>private</p>\\n<p>public</p>\\n<p>protect</p>\\n<p>friend函数</p>\\n<h2 id=\\"_2\\">第十周</h2>\\n<p>C++中的静态局部变量</p>\\n<ul>\\n<li>内存分配在编译完成（同C）</li>\\n<li>初次执行时会调用构造函数（初始化），之后不再调用（通过某个bit来判断是否是第一次）</li>\\n<li>main之后会调用析构函数</li>\\n</ul>\\n<h2 id=\\"_3\\">类</h2>\\n<ul>\\n<li>拷贝构造函数：默认所有变量直接拷贝，类似struct</li>\\n<li>拷贝赋值操作符</li>\\n<li>移动构造函数</li>\\n<li>移动</li>\\n</ul>\\n<h3 id=\\"_4\\">成员函数和非成员函数</h3>\\n<p>非成员函数就是普通函数（c风格）</p>\\n<p>成员函数是面向对象的那种</p>\\n<h3 id=\\"explicit\\">explicit</h3>\\n<p>https://stackoverflow.com/questions/121162/what-does-the-explicit-keyword-mean</p>\\n<p><code>Str a = b;</code></p>\\n<p>用explicit后需要改成 <code>Str a{b};</code>，但返回值永远不行</p>\\n<h3 id=\\"_5\\">左值、右值和引用</h3>\\n<p>https://zh4ui.net/post/2018-08-07-cplusplus-return-value-or-reference/</p>\\n<p>不能放在等号左边的是右值</p>\\n<p>能放在等号左边的是左值</p>\\n<h3 id=\\"defaultdelete\\">default/delete</h3>\\n<p>default: 自定义了待参数的构造函数后，编译器是不会再自动提供默认的无参版本了，若需要默认无参构造函数，则需要使用default</p>\\n<p>delete: 例如禁止使用拷贝构造函数，显示指示编译器不生成函数的默认版本，此后重载该函数非法</p>\\n<pre class=\\"codehilite\\"><code class=\\"language-c++ linenums\\">class MyClass\\n{\\n  public:\\n    MyClass() = default;\\n    MyClass(int i): data(i) {}\\n    MyClass(const MyClass &amp;) = delete;\\n  private:\\n    int data;\\n}</code></pre>\\n\\n\\n<h3 id=\\"_6\\">重载</h3>\\n<ul>\\n<li>全局operator new/delete[]可以重载，可以用来检测内存情况</li>\\n<li>类本身的operator new/delete</li>\\n</ul>\\n<p>二元操作符推荐写成非成员</p>\\n<h2 id=\\"_7\\">第十三周：继承</h2>\\n<p>对派生类内部来说</p>\\n<table>\\n<thead>\\n<tr>\\n<th>基类</th>\\n<th>public继承</th>\\n<th>protected继承</th>\\n<th>private继承</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>private</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n</tr>\\n<tr>\\n<td>protected</td>\\n<td>protected</td>\\n<td>protected</td>\\n<td><strong>private</strong></td>\\n</tr>\\n<tr>\\n<td>public</td>\\n<td>public</td>\\n<td>protected</td>\\n<td><strong>private</strong></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>对外部对象来说</p>\\n<table>\\n<thead>\\n<tr>\\n<th>基类</th>\\n<th>public继承</th>\\n<th>protected继承</th>\\n<th>private继承</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>private</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n</tr>\\n<tr>\\n<td>protected</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n</tr>\\n<tr>\\n<td>public</td>\\n<td>可见</td>\\n<td>不可见</td>\\n<td>不可见</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\"_8\\">动态绑定</h3>\\n<p>虚函数</p>","last_modified":"2020-06-02 15:21:25.306380","tags":["OOP","c++"],"title":"OOP Notes"}')}}]);
//# sourceMappingURL=chunk-2d0dd490.f08f20ee.js.map