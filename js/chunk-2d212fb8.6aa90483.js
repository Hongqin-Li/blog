(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d212fb8"],{ab78:function(t){t.exports=JSON.parse('{"excerpt":"> 这是我在上数字信号处理课程时的笔记，内容包括卷积、各种傅里叶变换(DFS/DTFT/CFS/CTFT/DFT/FFT)、STFT、z变换、线性时移不变系统LTI、语音产生模型、滤波器、DTW、HMM等语音处理相关知识点。","html":"<blockquote>\\n<p>这是我在上数字信号处理课程时的笔记，内容包括卷积、各种傅里叶变换(DFS/DTFT/CFS/CTFT/DFT/FFT)、STFT、z变换、线性时移不变系统LTI、语音产生模型、滤波器、DTW、HMM等语音处理相关知识点。</p>\\n</blockquote>\\n<p>考点：计算、证明</p>\\n<ol>\\n<li>卷积的计算、DTFT计算、N点DFT计算</li>\\n<li>DFT性质，时域卷积频域相乘</li>\\n<li>z变换、反z变换、零点极点，因果性、稳定性</li>\\n<li>LTI的输出等于输入和单位冲激响应的卷积，因果性、稳定性</li>\\n<li>采样，时域采样=频域周期延拓（有个系数）</li>\\n<li>滤波器：FIR设计</li>\\n<li>语音产生模型：LPC/LSP的计算原理、区别、优势，为什么使用LSP</li>\\n<li>模式识别原理：k-means、VQ、DTW（计算最短路）、HMM（三个问题）</li>\\n</ol>\\n<h2 id=\\"_1\\">信号与系统</h2>\\n<h3 id=\\"_2\\">能量和功率</h3>\\n<p>能量：<script type=\\"math/tex\\">\\\\lim_{T\\\\rightarrow\\\\infin} \\\\int_{-T}^{T} |f(t)|^2 dt<\/script>\\n</p>\\n<p>功率：<script type=\\"math/tex\\">\\\\lim_{T\\\\rightarrow\\\\infin} \\\\frac{1}{2T}\\\\int_{-T}^{T} |f(t)|^2 dt<\/script>\\n</p>\\n<h3 id=\\"_3\\">信号种类</h3>\\n<ul>\\n<li>单位冲激函数 <script type=\\"math/tex\\">\\\\delta(t)<\/script>，单位阶跃函数 <script type=\\"math/tex\\">u(t)=\\\\begin{cases} 1, t \\\\ge 0 \\\\\\\\0, t< 0 \\\\end{cases}<\/script>\\n</li>\\n<li>单位采样序列 <script type=\\"math/tex\\">\\\\delta(n)<\/script>，单位阶跃序列 <script type=\\"math/tex\\">u(n)<\/script>\\n</li>\\n<li>矩形序列 <script type=\\"math/tex\\">R_N(n)=\\\\begin{cases} 1, 0 \\\\le n \\\\le N \\\\\\\\ 0, \\\\text{else} \\\\end{cases}<\/script>\\n</li>\\n</ul>\\n<h3 id=\\"_4\\">系统</h3>\\n<p>系统可以看作一个运算<script type=\\"math/tex\\">T<\/script>，<script type=\\"math/tex\\">r(t)=T[e(t)]<\/script>\\n</p>\\n<ul>\\n<li>线性性，<script type=\\"math/tex\\">T[k_1 e_1 + k_2 e_2] = k_1T[e_1] + k_2 T[e_2]<\/script>\\n</li>\\n<li>时不变性，<script type=\\"math/tex\\">r(t) = T[e(t)] \\\\lrArr r(t+\\\\Delta t) = T[e(t+\\\\Delta t)]<\/script>\\n</li>\\n<li>因果性，<script type=\\"math/tex\\">t_0<\/script> 时刻的响应只取决于 <script type=\\"math/tex\\">t\\\\le t_0<\/script> 时刻的输入</li>\\n<li>无记忆性，<script type=\\"math/tex\\">t_0<\/script> 时刻的响应只取决于 <script type=\\"math/tex\\">t = t_0<\/script> 时刻的输入</li>\\n<li>稳定性，对任意有界输入，都只产生有界输出</li>\\n</ul>\\n<h2 id=\\"_5\\">傅里叶变换</h2>\\n<p>相关推导和性质（卷积和相乘，注意<script type=\\"math/tex\\">\\\\frac{1}{T}<\/script>）</p>\\n<h3 id=\\"cfs\\">CFS</h3>\\n<p>对于周期为<script type=\\"math/tex\\">T=\\\\frac{2\\\\pi}{\\\\omega}<\/script>的周期函数<script type=\\"math/tex\\">f(t)<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">f(t) = \\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} a_k e^{-jkwt}<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">a_k=\\\\frac{1}{T}\\\\int_{T} f(t) e^{-jk\\\\omega t} dt<\/script>\\n</p>\\n<h3 id=\\"ctft\\">CTFT</h3>\\n<p>就是周期趋于无穷大的CFS，可由CFS推出\\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}\\nf(t) &= \\\\lim_{\\\\omega \\\\rightarrow0} \\\\sum_{k=-\\\\infin}^{+\\\\infin} a_k e^{jk\\\\omega \\nt} \\\\\\\\\\n&= \\\\lim_{\\\\omega \\\\rightarrow0} \\\\sum_{k=-\\\\infin}^{+\\\\infin} \\\\left(\\\\frac{1}{T}\\\\int_{T} f(t) e^{-jk\\\\omega t} dt\\\\right) e^{jk\\\\omega t}\\\\\\\\\\n&= \\\\frac{1}{2\\\\pi} \\\\lim_{\\\\omega \\\\rightarrow0}  \\\\sum_{k=-\\\\infin}^{+\\\\infin} \\\\omega\\\\left(\\\\int_{T} f(t) e^{-jk\\\\omega t} dt\\\\right) e^{jk\\\\omega t}\\\\\\\\\\n&= \\\\frac{1}{2\\\\pi} \\\\int_{-\\\\infin}^{+\\\\infin} \\\\left(\\\\int_{-\\\\infin}^{+\\\\infin} f(t) e^{-j\\\\omega t} dt\\\\right) e^{j\\\\omega t} d\\\\omega\\\\\\\\\\n&= \\\\frac{1}{2\\\\pi} \\\\int_{-\\\\infin}^{+\\\\infin} F(\\\\omega)e^{j\\\\omega t} d\\\\omega\\\\\\\\\\n\\\\end{aligned}\\n<\/script>\\n其中第一行是周期无穷大的CFS公式，第二行将CFS公式的<script type=\\"math/tex\\">a_k<\/script>代入，第三行将<script type=\\"math/tex\\">T=\\\\frac{2\\\\pi}{\\\\omega}<\/script>代入，第四行为积分定义，第五行中令<script type=\\"math/tex\\">F(w) = \\\\int_{-\\\\infin}^{+\\\\infin} f(t) e^{-j\\\\omega t} dt<\/script>\\n</p>\\n<p>例子：<script type=\\"math/tex\\">f(x) = e^{j\\\\omega_0 t}\\\\Leftrightarrow F(\\\\omega) = 2\\\\pi \\\\delta(\\\\omega - \\\\omega_0)<\/script>\\n</p>\\n<p>证明：TODO</p>\\n<h3 id=\\"dfs\\">DFS</h3>\\n<p>可由CFS的离散情况推出（周期为N点），因为<script type=\\"math/tex\\">e^{jk\\\\omega n}<\/script>在离散情况下具有周期性，其他系数归并到了某个<script type=\\"math/tex\\">a_k<\/script>。</p>\\n<p>\\n<script type=\\"math/tex\\">x[n] = \\\\sum\\\\limits_{k=0}^{N-1} a_k e^{jk\\\\omega n}<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">a_k = \\\\frac{1}{T} \\\\sum\\\\limits_{n=0}^{N-1} x[n] e^{-jk\\\\omega n}<\/script>\\n</p>\\n<h3 id=\\"dtft\\">DTFT</h3>\\n<p>当N趋于正无穷时的DFS，推导过程类似CTFT（注意到积分区间略有区别，因为CFS和DFS求和区间的不同）</p>\\n<p>\\n<script type=\\"math/tex\\">x[n] = \\\\frac{1}{2\\\\pi} \\\\int_{2\\\\pi} X(\\\\omega) e^{jwn} dw<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">X(\\\\omega) = \\\\sum\\\\limits_{n=-\\\\infin}^{+\\\\infin} x[n] e^{-j \\\\omega n}<\/script>\\n</p>\\n<h3 id=\\"dftfft\\">DFT/FFT</h3>\\n<p>本质上是DFS，令旋转因子<script type=\\"math/tex\\">W_{N}^{kn} = e^{-jk\\\\omega n}=e^{-j\\\\frac{k2\\\\pi n}{N}}<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">X_k = \\\\sum\\\\limits_{n=0}^{N-1} x[n] W_{N}^{kn}<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">x[n] = \\\\frac{1}{N}\\\\sum\\\\limits_{k=0}^{N-1} X_k W_{N}^{-kn}<\/script>\\n</p>\\n<h3 id=\\"fft\\">FFT</h3>\\n<p>给定N点序列<script type=\\"math/tex\\">x[n], n = 0, ..., N-1<\/script>，FFT算法会在<script type=\\"math/tex\\">O(N\\\\log N)<\/script>时间内，给出N点序列<script type=\\"math/tex\\">FFT[x]_k = X_k = \\\\sum_{k=0}^{N-1} x[n]W_N^{kn}, k = 0, ..., N-1<\/script>\\n</p>\\n<p>令偶序列和奇序列分别为<script type=\\"math/tex\\">x_e[n] = x[2n], x_o[n] = x[2n+1]<\/script>，将<script type=\\"math/tex\\">X_k<\/script>拆成奇偶序列求和后易证 <script type=\\"math/tex\\">FFT[x]_k = FFT[x_e]_{k\'} + W_N^k FFT[x_o]_{k\'}, k = 0, ..., N-1, k\' = k \\\\bmod \\\\frac{N}{2}<\/script>，引入k\'是因为<script type=\\"math/tex\\">x_e,x_o<\/script>为<script type=\\"math/tex\\">\\\\frac{N}{2}<\/script>点序列，FFT后得到的是<script type=\\"math/tex\\">\\\\frac{N}{2}<\/script>点序列。显然，和如下形式等价\\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}\\nFFT[x]_k &= FFT[x_e]_{k} + W_N^k FFT[x_o]_{k}, k = 0, ..., \\\\frac{N}{2}-1 \\\\\\\\\\nFFT[x]_{k + \\\\frac{N}{2}} &= FFT[x_e]_{k} - W_N^k FFT[x_o]_{k}, k = 0, ..., \\\\frac{N}{2}-1 \\n\\\\end{aligned}\\n<\/script>\\n易知，时间复杂度递归式为<script type=\\"math/tex\\">T(N) = 2T(N/2) + O(N)<\/script>，类似归并排序，解为<script type=\\"math/tex\\">T(N) = O(N\\\\log N)<\/script>\\n</p>\\n<h3 id=\\"_6\\">性质</h3>\\n<p>下面时几个常用性质，只用某种FT做例子，其他的类似可证</p>\\n<p>DFT：时域<strong>循环卷积</strong>=频域相乘（即通过LTI系统=滤波），画个矩阵图证明即可，同理，时域相乘=频域循环卷积（系数稍有不同 ）</p>\\n<p>DFT：若<script type=\\"math/tex\\">x[n]<\/script>为实数序列，则<script type=\\"math/tex\\">X_k = \\\\overline{X_{N-k}}<\/script>\\n</p>\\n<p>CTFT：时域相移等于频域位移，<script type=\\"math/tex\\">CTFT\\\\left[f(t)e^{j\\\\Delta\\\\omega t }\\\\right] = \\\\int_{-\\\\infin}^{+\\\\infin} f(t) e^{j (\\\\omega + \\\\Delta\\\\omega) t} dt = F(\\\\omega +\\\\Delta\\\\omega)<\/script>\\n</p>\\n<p>DTFT：频域微分，<script type=\\"math/tex\\">DTFT\\\\left[ nx[n] \\\\right]= \\\\sum n x[n] e^{-j \\\\omega n} = \\\\sum j\\\\frac{d(x[n] e^{-j\\\\omega n})}{d\\\\omega} = j \\\\frac{dX(\\\\omega)}{d\\\\omega}<\/script>\\n</p>\\n<h2 id=\\"_7\\">理想采样</h2>\\n<p>令原始信号（时域连续）为<script type=\\"math/tex\\">x(t)<\/script>，采样周期为<script type=\\"math/tex\\">T_s = \\\\frac{2\\\\pi}{\\\\omega_s}<\/script>，周期性冲激串为 <script type=\\"math/tex\\">p(t)=\\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} \\\\delta(t - kT_s)<\/script>，显然理想采样后得 <script type=\\"math/tex\\">x_p(t) =x(t) p(t) = \\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} x(kT_s) \\\\delta(t-kT_s)<\/script>。对<script type=\\"math/tex\\">x_p(t)<\/script>做CTFT得</p>\\n<p>\\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}X_p(\\\\omega) &= \\\\int x_p(t) e^{-j \\\\omega t} dt \\\\\\\\&= \\\\int  \\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} x(kT_s) \\\\delta(t-kT_s) e^{-j \\\\omega t} dt \\\\\\\\&= \\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} \\\\underbrace{x(kT_s)}_{x[k]} e^{-j\\\\omega kT_s} \\\\\\\\\\\\end{aligned}\\n<\/script>\\n</p>\\n<p>注意到上式和对样本点<script type=\\"math/tex\\">x[k] = x(kT_s)<\/script> 做DTFT的结果<script type=\\"math/tex\\">X\'(\\\\omega) = \\\\sum x[k] e^{-j\\\\omega k}<\/script> 类似，即<script type=\\"math/tex\\">X\'(\\\\omega T_s) = X_p(\\\\omega)<\/script>，于是，我们可以通过样本点和采样频率，来计算采样后信号的频谱。下面给出特性——<strong>时域采样等于频域的周期延拓</strong>。</p>\\n<p><strong>证明</strong>  因为<script type=\\"math/tex\\">p(t)<\/script>是周期函数，对其求CFS可得<script type=\\"math/tex\\">p_k =\\\\frac{1}{T_s}<\/script>，即<script type=\\"math/tex\\">p(t) = \\\\sum_{k=-\\\\infin}^{+\\\\infin} p_k e^{jk\\\\omega_s t} = \\\\frac{1}{T_s} \\\\sum_{k=-\\\\infin}^{+\\\\infin} e^{jk\\\\omega_s t}<\/script>。故有<script type=\\"math/tex\\">X_p(\\\\omega) = CTFT[x_p(t)] = CTFT[x(t)p(t)] = CTFT\\\\left[\\\\frac{1}{T_s} \\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} x(t) e^{jk\\\\omega_s t}\\\\right] = \\\\frac{1}{T_s} \\\\sum\\\\limits_{k=-\\\\infin}^{+\\\\infin} X(\\\\omega + kw_s)<\/script>，最后一个等号用到了时域相移等于频域位移。</p>\\n<h2 id=\\"z\\">z变换</h2>\\n<p>本质上是扩展DTFT，各种性质类似傅里叶变换</p>\\n<p>序列<script type=\\"math/tex\\">x[n]<\/script>的z变换：<script type=\\"math/tex\\">X(z) = \\\\sum\\\\limits_{n=-\\\\infin}^{+\\\\infin} x[n]z^{-n}<\/script>，当<script type=\\"math/tex\\">z=e^{j\\\\omega}<\/script>时为DTFT</p>\\n<p>收敛域（ROC）为z变换收敛（绝对可和）的z的集合，即 <script type=\\"math/tex\\">\\\\left|\\\\sum\\\\limits_{n=-\\\\infin}^{+\\\\infin} x[n]z^{-n}\\\\right|< +\\\\infin<\/script>\\n</p>\\n<p>显然，当收敛域包含单位圆时（<script type=\\"math/tex\\">|z|=1<\/script>），DTFT存在</p>\\n<h3 id=\\"_8\\">例子</h3>\\n<p>因果序列<script type=\\"math/tex\\">x[n] = \\\\alpha^n u[n]<\/script>的z变换：<script type=\\"math/tex\\">X(z)=\\\\frac{1}{1-\\\\alpha z^{-1}}, |z| > |\\\\alpha|<\/script>\\n</p>\\n<p>反因果序列<script type=\\"math/tex\\">x[n] = -\\\\alpha^n u[-n-1]<\/script>的z变换同上，但收敛域不同，<script type=\\"math/tex\\">|z| < |\\\\alpha|<\/script>\\n</p>\\n<p>有限长序列<script type=\\"math/tex\\">\\\\delta [n-k]<\/script>的z变换：<script type=\\"math/tex\\">X(z) = z^{-k}<\/script>，注意k的正负对于收敛域的影响</p>\\n<h3 id=\\"z_1\\">z反变换</h3>\\n<p>暴力解：泰勒展开后用有限长序列的z变换分析</p>\\n<h2 id=\\"lti\\">LTI</h2>\\n<p>线性时移不变系统（Linear, time invariant system）：满足线性性和时移不变性的系统</p>\\n<p>离散LTI：输入输出信号是离散的LTI，特点是响应只取决于其对单位冲激函数的响应<script type=\\"math/tex\\">h[n]=LTI[\\\\delta[n]]<\/script>，因为 \\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}\\ny = LTI[x] &= LTI\\\\left[\\\\sum \\\\delta[n-i]x[i] \\\\right] \\\\\\\\\\n& = \\\\sum x[i] LTI[\\\\delta[n-i]] \\\\\\\\\\n&= \\\\sum x[i] h[n-i] \\\\\\\\\\n&= x*h\\n\\\\end{aligned}\\n<\/script>\\n对两边做z变换可得：<script type=\\"math/tex\\">Y(z) = X(z)H(z)<\/script>。同理，连续LTI很类似。</p>\\n<h3 id=\\"_9\\">因果性</h3>\\n<p>因果系统（Causal system）：直到有输入才会开始响应</p>\\n<p>（易证）故LTI系统为因果系统的<strong>充要条件</strong>为 <script type=\\"math/tex\\">\\\\forall n < 0, h[n] = 0<\/script>，可以发现 <script type=\\"math/tex\\">y[n] = \\\\sum\\\\limits_{i=-\\\\infin}^{+\\\\infin } x[i] h[n-i] = \\\\sum\\\\limits_{i=-\\\\infin}^{ n } x[i] h[n-i]<\/script>，即输出只取决于之前的输入</p>\\n<p>推论：LTI系统为因果系统的<strong>充要条件</strong>是单位响应函数的z变换<script type=\\"math/tex\\">H(z) <\/script>的收敛域包含<script type=\\"math/tex\\">+\\\\infin<\/script>\\n</p>\\n<h3 id=\\"_10\\">稳定性</h3>\\n<p><strong>定理</strong>  LTI系统的稳定性的<strong>充要条件</strong>为单位响应函数绝对可和，即<script type=\\"math/tex\\">\\\\sum|h[i]| < \\\\infin<\/script>\\n</p>\\n<p><strong>证明</strong><br />\\n充分性：任意有界输入<script type=\\"math/tex\\">\\\\forall i, |x[i]| < B<\/script>，有<script type=\\"math/tex\\">y[n] = \\\\sum x[n-i]h[i] \\\\le \\\\sum |x[n-i]| \\\\cdot |h[i]]| \\\\le B \\\\sum|h[i]| < \\\\infin<\/script>\\n必要性：若非绝对可和，即<script type=\\"math/tex\\">\\\\sum |h[n]| <\\\\infin<\/script>，则可以构造有界输入 <script type=\\"math/tex\\">x[n] = \\\\begin{cases} \\\\frac{\\\\overline{h[-n]}}{|h[-n]|}, &h[-n] \\\\ne 0\\\\\\\\0,&h[-n] = 0 \\\\end{cases}<\/script>，则代入可得<script type=\\"math/tex\\">y[0]=\\\\infin<\/script>，即不稳定</p>\\n<p><strong>推论</strong>  LTI系统稳定的<strong>充要条件</strong>是<script type=\\"math/tex\\">H(z)<\/script>的收敛域包含单位圆<script type=\\"math/tex\\">|z| = 1<\/script>\\n</p>\\n<h2 id=\\"_11\\">滤波器</h2>\\n<p>令<script type=\\"math/tex\\">H(\\\\omega)<\/script>为滤波器系统，待滤波信号为<script type=\\"math/tex\\">X(\\\\omega)<\/script>，则滤波结果为<script type=\\"math/tex\\">Y(\\\\omega) = X(\\\\omega)H(\\\\omega)<\/script>\\n</p>\\n<ul>\\n<li>Non-Recursive Filter：输出只和输入有关，即<script type=\\"math/tex\\">y[n] = \\\\sum_{i=0}^M b_i x[n-i]<\/script>\\n</li>\\n<li>\\n<script type=\\"math/tex\\">H(z) = \\\\sum_{i=0}^{M} b_i z^{-i}<\/script> 极点只有一个，即原点，故为稳定系统</li>\\n<li>\\n<script type=\\"math/tex\\">h[n] = \\\\begin{cases}b_n,  &0\\\\le n\\\\le M \\\\\\\\ 0,& \\\\text{else}\\\\end{cases}<\/script>，响应有限，故也称为FIR</li>\\n<li>Recursive Filter：输出还和之前的输出有关，即<script type=\\"math/tex\\">y[n] = -\\\\sum_{i=1}^{N} a_i y[n-i] + \\\\sum_{i=0}^{M} b_i x[n-i]<\/script>，不妨令<script type=\\"math/tex\\">a_0 = 1<\/script>，则等价于<script type=\\"math/tex\\">\\\\sum_{i=0}^{N} a_i y[n-i] = \\\\sum_{i=0}^{M} b_i x[n-i]<\/script>\\n</li>\\n<li>\\n<script type=\\"math/tex\\">H(z) = \\\\frac{\\\\sum_{i=0}^{M} b_i z^{-i}}{\\\\sum_{i=0}^{N} a_i z^{-i}} = z^{N-M} \\\\frac{\\\\sum_{i=0}^{M} b_{M-i} z^{i}}{\\\\sum_{i=0}^{N} a_{N-i} z^{i}} <\/script>，不一定稳定，需要使所有极点在单位圆内</li>\\n<li>注意到<script type=\\"math/tex\\">H(z)<\/script>的第二项为可以用有理分式分解的方法分解，最终可以得到形如 <script type=\\"math/tex\\">h[n] = \\\\sum q_i \\\\alpha_i^n u[n]<\/script>，即无限响应，故也称为IIR</li>\\n</ul>\\n<h3 id=\\"fir\\">FIR</h3>\\n<p>两种FIR</p>\\n<p>TODO</p>\\n<h2 id=\\"_12\\">语音产生模型</h2>\\n<p>人的语音有三种：浊音（周期性periodic）、清音（噪声noise）、爆破音（脉冲型implusive）</p>\\n<p>声带开启和闭合使得气流形成一系列脉冲。开闭周期称为基音周期，其倒数为基因频率，简称基频。</p>\\n<p>线性产生模型：语音是由气流激励声道，最后从嘴唇或鼻孔、或同时从嘴唇和鼻孔辐射出来形成的，故系统函数为<script type=\\"math/tex\\">H(z) = U(z) V(z) R(z)<\/script>，由激励模型U、声道模型V、辐射模型R构成。（LTI系统输出的频率响应为输入和系统函数直接相乘，见<a href=\\"#LTI\\">LTI</a>一节）</p>\\n<p>非线性产生模型：调频调幅（AM-FM）模型</p>\\n<h3 id=\\"_13\\">激励模型</h3>\\n<p>气流激励的表示：单位阶跃脉冲（窄方波）可以表示为<script type=\\"math/tex\\">E(z)=\\\\frac{A_v}{1-z^{-1}}<\/script>\\n</p>\\n<p>浊音的基音周期的波形为</p>\\n<p>\\n<script type=\\"math/tex\\">g(n) = \\\\begin{cases}\\\\frac{1}{2}\\\\left[1-\\\\cos (n\\\\pi/N_1)\\\\right], &0\\\\le n< N_1\\\\\\\\ \\\\cos\\\\left(\\\\frac{\\\\pi}{2}\\\\frac{n-N_1}{N_2}\\\\right), &N_1 \\\\le n < N_2 \\\\\\\\ 0,& else \\\\end{cases}<\/script>\\n</p>\\n<p>转换到频率域后，可以发现 <script type=\\"math/tex\\">G(z)<\/script> 是个低通滤波器，故通常将其表示成全极点模型 <script type=\\"math/tex\\">G(z)=\\\\frac{1}{(1-g_1 z^{-1})(1-g_2 z^{-1})}<\/script>，其中<script type=\\"math/tex\\">g_1, g_2<\/script>接近1。于是气流激励通过浊音激励模型后为<script type=\\"math/tex\\">U(z)=E(z)G(z)<\/script>，而清音则可以用白噪声序列来表示。</p>\\n<h3 id=\\"_14\\">声道模型</h3>\\n<p>发元音的声道（全极点模型/级联型共振峰模型）为 <script type=\\"math/tex\\">V(z) = \\\\frac{G}{1-\\\\sum a_k z^{-k}}<\/script>\\n</p>\\n<p>非元音和辅音的声道（零极点/并联型共振峰模型）为<script type=\\"math/tex\\">V(z) = \\\\frac{\\\\sum b_k z^{-k}}{1-\\\\sum a_k z^{-k}}<\/script>\\n</p>\\n<h3 id=\\"_15\\">辐射模型</h3>\\n<p>辐射效应是指声道输出的速度波，经口唇变成声压。经研究表明，可以表示为一个高通滤波器，<script type=\\"math/tex\\">R(z)=1-r_0 z^{-1}<\/script>，其中<script type=\\"math/tex\\">r_0<\/script>接近1</p>\\n<h3 id=\\"-\\">调频-调幅模型</h3>\\n<p>一个载波频率fc，频率调制信号为q(t)，由a(t)控制幅值的调制信号为：<script type=\\"math/tex\\">r(t) = a(t)\\\\cos [2\\\\pi(f_c\\\\cdot t+\\\\int_0^t q(\\\\tau) d\\\\tau +\\\\theta)]<\/script>，易知其瞬时频率为<script type=\\"math/tex\\">f_c + q(t)<\/script>\\n</p>\\n<p>这样的<script type=\\"math/tex\\">r(t)<\/script>可以看作是语音信号中单个共振峰的输出，而语音信号则是若干个共振峰的叠加：<script type=\\"math/tex\\">s(t) = \\\\sum r_k(t)<\/script>\\n</p>\\n<h2 id=\\"_16\\">线性预测</h2>\\n<p>问题：如何获得语音产生模型的各种系数？</p>\\n<p>语音产生模型可以统一简化为<script type=\\"math/tex\\">H(z)=\\\\frac{G(1-\\\\sum b_i z^{-i})}{1-\\\\sum a_i z^{-i}}<\/script>，既有零点又有极点，按照有理分式的不同，可以分为如下三种信号模型</p>\\n<ol>\\n<li>自回归AR模型：全极点模型，<script type=\\"math/tex\\">H(z) = \\\\frac{G}{1-\\\\sum a_i z^{-i}}, s[n] = \\\\sum a_i s[n-i] + G e[n]<\/script>，其中<script type=\\"math/tex\\">e[n]<\/script>是激励输入，<script type=\\"math/tex\\">s[n]<\/script>是语音输出</li>\\n<li>滑动平均MA模型：全零点模型</li>\\n<li>ARMA模型</li>\\n</ol>\\n<p>由AR模型启发，线性预测就是用前几个信号的线性叠加来预测下一刻信号，即<script type=\\"math/tex\\">\\\\hat s[n] = \\\\sum_{i=0}^{p} \\\\alpha_i s[n-i]<\/script>。相应的误差函数为<script type=\\"math/tex\\">d[n] = s[n] - \\\\sum_{i=0}^{p} \\\\alpha_i s[n-i], D(z) = 1-\\\\sum_{i=0}^{p} \\\\alpha_i z^{-i}<\/script>。注意到误差函数和语音激励输入的相似性（若<script type=\\"math/tex\\">\\\\alpha_i = a_i<\/script>，则只差个系数<script type=\\"math/tex\\">G<\/script>），且激励输入在通常情况下也很小（是周期性的单位阶跃脉冲，大部分地方为零），直觉上，在短时区间内最小化误差平方 <script type=\\"math/tex\\">D_n = \\\\sum_n d[n]^2<\/script> （n的上下限未定，将导致不同的解法）得到的<script type=\\"math/tex\\">\\\\alpha_i<\/script>可以逼近<script type=\\"math/tex\\">a_i<\/script>，于是获得了语音产生模型的系数！上述<script type=\\"math/tex\\">\\\\alpha_i<\/script>也称为线性预测系数LPC（Linear Prediction Coefficients），具体计算过程如下</p>\\n<p>求导\\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}\\n\\\\frac{\\\\partial D_n}{\\\\partial \\\\alpha_k} &= -\\\\sum_n 2d[n] s[n-k]\\\\\\\\\\n&= -2 \\\\sum_n (s[n] - \\\\sum_{i=0}^{p} \\\\alpha_i s[n-i]) s[n-k] \\\\\\\\\\n&= -2 \\\\left[\\\\sum_n s[n]s[n-k]  - \\\\sum_n \\\\sum_{i=0}^{p} \\\\alpha_i s[n-i] s[n-k]  \\\\right]\\n\\\\end{aligned}\\n<\/script>\\n令其为零可得<script type=\\"math/tex\\">\\\\sum_n s[n]s[n-k] = \\\\sum_n \\\\sum_{i=0}^{p} \\\\alpha_i s[n-i] s[n-k]<\/script>，令<script type=\\"math/tex\\">\\\\phi_{i, j}=\\\\sum_n s[n-i]s[n-j] <\/script>，代入有<script type=\\"math/tex\\">\\\\phi_{0, k} = \\\\sum_{i=0}^{p} \\\\alpha_i \\\\phi_{i, k}<\/script>。显然这是个矩阵方程，可解。</p>\\n<h3 id=\\"_17\\">线谱对</h3>\\n<p>LSP/LSF（Line Spectral Pairs/Frequencies）线谱对是LPC的另外一种<strong>等价</strong>的表示方式</p>\\n<p>详细的证明，见<a href=\\"https://dsp.stackexchange.com/questions/49630/how-to-prove-line-spectral-pair-coefficient-properties\\">How to prove Line Spectral Pair coefficient properties?</a>和<a href=\\"https://pdfs.semanticscholar.org/0617/eafac11593bea2e98a04a2fd091322ff88eb.pdf?_ga=2.14649781.302893674.1591754566-64324825.1591754566\\">Line spectrum pair (LSP) and speech data compression</a></p>\\n<p>TODO</p>\\n<h2 id=\\"_18\\">语音识别</h2>\\n<p>k-means：聚类算法</p>\\n<p>k-NN：分类算法，选择k个邻居中占多数的那一类作为分类输出</p>\\n<p>矢量量化（Vector Quantization）算法：TODO</p>\\n<h3 id=\\"dtw\\">DTW</h3>\\n<p>DTW（Dynamic Time Wraping）用于解决长短不一的语音信号的匹配度的衡量</p>\\n<p>问题（不是标准的DTW，有所简化）：给定两个语音信号的特征<script type=\\"math/tex\\">\\\\vec X = (x_1, .., x_N)<\/script>和<script type=\\"math/tex\\">\\\\vec Y = (y_1, ..., y_M)<\/script>，以及某个距离度量函数<script type=\\"math/tex\\">d(x_i, y_j)<\/script>，我们可以计算一个n×m的距离矩阵<script type=\\"math/tex\\">A_{ij} = d(x_i, y_j)<\/script>，求矩阵中的一条经过的<script type=\\"math/tex\\">d(i, j)<\/script>之和最短的、从<script type=\\"math/tex\\">(1, 1)\\\\rightarrow(N, M)<\/script>的路径（位移满足<script type=\\"math/tex\\">\\\\Delta i, \\\\Delta j\\\\in \\\\{0, 1\\\\} \\\\text{ and } \\\\Delta i +\\\\Delta j\\\\ge 1<\/script>）。</p>\\n<p>显然可用DP解决，复杂度为<script type=\\"math/tex\\">O(NM)<\/script>。</p>\\n<p>这种方法可以用于孤立词识别，给定一个带预测的语音信号的特征，将其和各个词的特征计算DTW，选择路径最短的那个词作为预测结果。</p>\\n<h3 id=\\"hmm\\">HMM</h3>\\n<p>本质上是个概率版的有限状态机</p>\\n<p>令所有输出可能的集合为<script type=\\"math/tex\\">V = \\\\{v_1, ..., v_{|V|}\\\\}<\/script>，所有状态可能的集合为<script type=\\"math/tex\\">S=\\\\{s_1, ..., s_{|S|}\\\\}<\/script>，系统在 <script type=\\"math/tex\\">t<\/script> 时刻的状态记为<script type=\\"math/tex\\">z_t<\/script>，输出记为<script type=\\"math/tex\\">x_t<\/script>。令状态转移矩阵<script type=\\"math/tex\\">A_{ij} = P\\\\{s_j|s_i\\\\}<\/script>为当前状态为<script type=\\"math/tex\\">s_i<\/script>时下一状态为<script type=\\"math/tex\\">s_j<\/script>的概率，令状态输出矩阵<script type=\\"math/tex\\">B_{i, x_t} = P\\\\{ x_t = v_k | z_t = s_i\\\\}<\/script>为当前状态为<script type=\\"math/tex\\">s_i<\/script>的情况下输出为<script type=\\"math/tex\\">v_k<\/script>的概率。<script type=\\"math/tex\\">A,B<\/script> 构成了一个HMM模型，有如下三个基本问题：</p>\\n<ol>\\n<li>评估观察序列概率（前向算法）：给定<script type=\\"math/tex\\">A,B<\/script>，求输出序列<script type=\\"math/tex\\">\\\\vec x = x_1, ..., x_T<\/script>发生的概率</li>\\n<li>最佳路径问题（Viterbi算法）：给定<script type=\\"math/tex\\">A, B<\/script>和输出序列<script type=\\"math/tex\\">\\\\vec x<\/script>，求最可能的状态序列</li>\\n<li>模型训练问题（EM算法）：若观测到某个输出序列<script type=\\"math/tex\\">\\\\vec x<\/script>，求模型参数<script type=\\"math/tex\\">A, B<\/script>\\n</li>\\n</ol>\\n<h4 id=\\"_19\\">前向算法</h4>\\n<p>令<script type=\\"math/tex\\">\\\\alpha_i = P\\\\{ x_1, ..., x_t, z_t = s_i\\\\}<\/script>，显然有<script type=\\"math/tex\\">P(x_1, ..., x_t) = \\\\sum_i \\\\alpha_i(t)<\/script>，有\\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}\\n\\\\alpha_i(t) &= P\\\\{ x_1, ..., x_t, z_t = s_i\\\\} \\\\\\\\\\n&= P\\\\{x_t | x_1, ..., x_{t-1}, z_t = s_i\\\\} P\\\\{x_1, ..., x_{t-1}, z_t=s_i\\\\} \\\\\\\\\\n&= P\\\\{x_t|z_t = s_i\\\\} \\\\sum_j P\\\\{x_1, ..., x_{t-1}, z_{t-1} = s_j, z_t = s_i\\\\} \\\\\\\\\\n&= B_{i, x_t} \\\\sum_j  P\\\\{z_t = s_i|x_1, ..., x_{t-1}, z_{t-1} = s_j\\\\} P\\\\{x_1, ..., x_{t-1}, z_{t-1} = s_j\\\\} \\\\\\\\\\n&= B_{i, x_t} \\\\sum_j  A_{ji}\\\\alpha_j(t-1)\\n\\\\end{aligned}\\n<\/script>\\n于是我们可以通过<script type=\\"math/tex\\">\\\\alpha_i(t-1)<\/script>得到下一时刻的<script type=\\"math/tex\\">\\\\alpha_i(t)<\/script>（注意初始化<script type=\\"math/tex\\">\\\\alpha_i<\/script>）最终可以得到<script type=\\"math/tex\\">P(x_1, ..., x_T) = \\\\sum_i \\\\alpha_i(T)<\/script>\\n</p>\\n<h4 id=\\"viterbi\\">Viterbi</h4>\\n<p>令<script type=\\"math/tex\\">\\\\beta_i(t) = \\\\max_{z_1, ..., z_{t-1}} P\\\\{x_1, ..., x_t, z_1, ..., z_{t-1}, z_t=s_i\\\\}<\/script>，注意max下标只到<script type=\\"math/tex\\">z_{t-1}<\/script>，可以证明<script type=\\"math/tex\\">\\\\beta_i(t) = B_{i, x_t} \\\\max_j \\\\{ A_{ji} \\\\beta_j(t) \\\\}<\/script>，于是在每t时刻的最可能的状态为 <script type=\\"math/tex\\">\\\\text{argmax}_i \\\\beta_i(t)<\/script>\\n</p>\\n<h4 id=\\"baum-welch-algorithm\\">Baum-Welch algorithm</h4>\\n<p>也称为 forward-backward algorithm，是EM算法的一种特殊情况</p>\\n<p>TODO</p>\\n<h2 id=\\"_20\\">语音编码</h2>\\n<p>TODO</p>\\n<h2 id=\\"reference\\">Reference</h2>\\n<p><a href=\\"http://www.ws.binghamton.edu/fowler/Fowler%20Personal%20Page/EECE301%20-%20Flipped.htm\\">EECE 301 Signals &amp; Systems  - Flipped</a></p>\\n<p>语音信号处理（清华大学出版社）</p>","tags":["math"],"title":"数字信号处理笔记","updated_at":"2020-07-18T14:35:40.142666","url":"/docs/course/dsp"}')}}]);
//# sourceMappingURL=chunk-2d212fb8.6aa90483.js.map