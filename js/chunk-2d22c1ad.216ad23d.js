(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22c1ad"],{f28c:function(s){s.exports=JSON.parse('{"excerpt":"例题：[洛谷P1833 樱花](https://www.luogu.com.cn/problem/P1833)","html":"<h2 id=\\"01\\">混合背包（01/完全/多重）</h2>\\n<p>例题：<a href=\\"https://www.luogu.com.cn/problem/P1833\\">洛谷P1833 樱花</a></p>\\n<p>令ci是物品i的费用，wi是物品i的重量，mi是物品i的数量上限（等于1为01背包，等于无穷为完全背包），<script type=\\"math/tex\\">f[i][j]<\/script>是用费用j拿完前i个物品的最大总重量。直觉上，对每个物品，我们可以考虑其所有可能状态（即拿了0~mi个）即可，于是得到状态方程如下</p>\\n<p>\\n<script type=\\"math/tex\\">f[i][j] = \\\\max\\\\limits_{0\\\\le k \\\\le m_i} f[i-1][j - k\\\\cdot c_i] + k\\\\cdot w_i<\/script>\\n</p>\\n<p>经过优化后有（不妨画个图），至于为什么，因为f[j]中包含的之前的对之前的k取max。</p>\\n<p>01背包：</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"k\\">for</span><span class=\\"w\\"> </span><span class=\\"n\\">i</span><span class=\\"w\\"> </span><span class=\\"o\\">=</span><span class=\\"w\\"> </span><span class=\\"mi\\">1</span><span class=\\"w\\"> </span><span class=\\"k\\">to</span><span class=\\"w\\"> </span><span class=\\"nl\\">N</span><span class=\\"p\\">:</span><span class=\\"w\\"></span>\\n<span class=\\"w\\">    </span><span class=\\"k\\">for</span><span class=\\"w\\"> </span><span class=\\"n\\">j</span><span class=\\"w\\"> </span><span class=\\"o\\">=</span><span class=\\"w\\"> </span><span class=\\"n\\">M</span><span class=\\"w\\"> </span><span class=\\"k\\">to</span><span class=\\"w\\"> </span><span class=\\"mi\\">0</span><span class=\\"err\\">:</span><span class=\\"w\\"></span>\\n<span class=\\"w\\">        </span><span class=\\"n\\">f</span><span class=\\"o\\">[</span><span class=\\"n\\">j</span><span class=\\"o\\">]</span><span class=\\"w\\"> </span><span class=\\"o\\">=</span><span class=\\"w\\"> </span><span class=\\"nf\\">max</span><span class=\\"p\\">(</span><span class=\\"n\\">f</span><span class=\\"o\\">[</span><span class=\\"n\\">j</span><span class=\\"o\\">]</span><span class=\\"p\\">,</span><span class=\\"w\\"> </span><span class=\\"n\\">f</span><span class=\\"o\\">[</span><span class=\\"n\\">j-c[i</span><span class=\\"o\\">]</span><span class=\\"err\\">]</span><span class=\\"w\\"> </span><span class=\\"o\\">+</span><span class=\\"w\\"> </span><span class=\\"n\\">w</span><span class=\\"o\\">[</span><span class=\\"n\\">i</span><span class=\\"o\\">]</span><span class=\\"p\\">)</span><span class=\\"w\\"></span>\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>完全背包：</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"k\\">for</span><span class=\\"w\\"> </span><span class=\\"n\\">i</span><span class=\\"w\\"> </span><span class=\\"o\\">=</span><span class=\\"w\\"> </span><span class=\\"mi\\">1</span><span class=\\"w\\"> </span><span class=\\"k\\">to</span><span class=\\"w\\"> </span><span class=\\"nl\\">N</span><span class=\\"p\\">:</span><span class=\\"w\\"></span>\\n<span class=\\"w\\">    </span><span class=\\"k\\">for</span><span class=\\"w\\"> </span><span class=\\"n\\">j</span><span class=\\"w\\"> </span><span class=\\"o\\">=</span><span class=\\"w\\"> </span><span class=\\"mi\\">0</span><span class=\\"w\\"> </span><span class=\\"k\\">to</span><span class=\\"w\\"> </span><span class=\\"nl\\">M</span><span class=\\"p\\">:</span><span class=\\"w\\"></span>\\n<span class=\\"w\\">        </span><span class=\\"n\\">f</span><span class=\\"o\\">[</span><span class=\\"n\\">j</span><span class=\\"o\\">]</span><span class=\\"w\\"> </span><span class=\\"o\\">=</span><span class=\\"w\\"> </span><span class=\\"nf\\">max</span><span class=\\"p\\">(</span><span class=\\"n\\">f</span><span class=\\"o\\">[</span><span class=\\"n\\">j</span><span class=\\"o\\">]</span><span class=\\"p\\">,</span><span class=\\"w\\"> </span><span class=\\"n\\">f</span><span class=\\"o\\">[</span><span class=\\"n\\">j-c[i</span><span class=\\"o\\">]</span><span class=\\"err\\">]</span><span class=\\"w\\"> </span><span class=\\"o\\">+</span><span class=\\"w\\"> </span><span class=\\"n\\">w</span><span class=\\"o\\">[</span><span class=\\"n\\">i</span><span class=\\"o\\">]</span><span class=\\"p\\">)</span><span class=\\"w\\"></span>\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>多重背包：</p>\\n<p>用二进制优化，拆成<script type=\\"math/tex\\">O(\\\\log m_i)<\/script> 个01背包即可，因为正整数n可以拆成 <script type=\\"math/tex\\">0, 1, 2, 4, ..., 2^{k-1}, n-2^{k} + 1<\/script>，其中 <script type=\\"math/tex\\">k=\\\\lceil \\\\log (n+1) \\\\rceil - 1<\/script>\\n</p>","tags":["dp"],"title":"动态规划笔记","updated_at":"2020-07-18T14:35:40.142666","url":"/docs/course/dp"}')}}]);
//# sourceMappingURL=chunk-2d22c1ad.216ad23d.js.map