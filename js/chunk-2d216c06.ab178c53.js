(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d216c06"],{c498:function(s){s.exports=JSON.parse('{"created_at":"2020-10-17T10:05:41+08:00","excerpt":"Let $a_1, \\\\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array (after the removal, the remaining parts are concatenated).","html":"<p>Let <script type=\\"math/tex\\">a_1, \\\\ldots, a_n<\/script> be an array of <script type=\\"math/tex\\">n<\/script> positive integers. In one operation, you can choose an index <script type=\\"math/tex\\">i<\/script> such that <script type=\\"math/tex\\">a_i = i<\/script>, and remove <script type=\\"math/tex\\">a_i<\/script> from the array (after the removal, the remaining parts are concatenated).</p>\\n<p>The weight of <script type=\\"math/tex\\">a<\/script> is defined as the maximum number of elements you can remove.</p>\\n<p>You must answer <script type=\\"math/tex\\">q<\/script> independent queries <script type=\\"math/tex\\">(x,y)<\/script>: after replacing the <script type=\\"math/tex\\">x<\/script> first elements of <script type=\\"math/tex\\">a<\/script> and the <script type=\\"math/tex\\">y<\/script> last elements of <script type=\\"math/tex\\">a<\/script> by <script type=\\"math/tex\\">n+1<\/script> (making them impossible to remove), what would be the weight of <script type=\\"math/tex\\">a<\/script> ?</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>The first line contains two integers <script type=\\"math/tex\\">n<\/script> and <script type=\\"math/tex\\">q (1 \\\\le n, q \\\\le 3 \\\\cdot 10^5)<\/script> — the length of the array and the number of queries.</p>\\n<p>The second line contains <script type=\\"math/tex\\">n<\/script> integers <script type=\\"math/tex\\">a_1, a_2, ..., a_n(1 \\\\leq a_i \\\\leq n)<\/script> — elements of the array.</p>\\n<p>The <script type=\\"math/tex\\">i<\/script>-th of the next <script type=\\"math/tex\\">q<\/script> lines contains two integers <script type=\\"math/tex\\">x<\/script> and <script type=\\"math/tex\\">y<\/script> (<script type=\\"math/tex\\">x, y \\\\ge 0<\/script> and <script type=\\"math/tex\\">x+y < n<\/script> ).</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>Print <script type=\\"math/tex\\">q<\/script> lines, <script type=\\"math/tex\\">i<\/script>-th line should contain a single integer  the answer to the <script type=\\"math/tex\\">i<\/script>-th query.</p>\\n<h2 id=\\"examples\\">Examples</h2>\\n<p>Input 1</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4\\n5\\n6\\n7</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>13 5\\n2 2 3 9 5 4 6 5 7 8 3 11 13\\n3 1\\n0 0\\n2 4\\n5 0\\n0 12\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 1</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4\\n5</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5\\n11\\n6\\n1\\n0\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 2</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5 2\\n1 4 1 2 4\\n0 0\\n1 0\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 2</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>2\\n0\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>为了方便我们先将每个查询转换成区间 <script type=\\"math/tex\\">[l, r]<\/script>，其中 <script type=\\"math/tex\\">l=1+x, r = n-y<\/script>\\n</p>\\n<p>可以发现元素 <script type=\\"math/tex\\">a_i<\/script> 可删当且仅当 <script type=\\"math/tex\\">i-a_i \\\\ge 0<\/script> 且其左边至少有 <script type=\\"math/tex\\">i-a_{i}<\/script> 个可以删除的元素</p>\\n<p>考虑 <script type=\\"math/tex\\">[l, r]<\/script> 的答案 <script type=\\"math/tex\\">f[l][r]<\/script>，转移方程为 <script type=\\"math/tex\\">f[l][r] = \\\\begin{cases} f[l][r-1]+1 &\\\\text{if } f[l][r-1] \\\\ge r-a_r \\\\\\\\f[l][r-1] &\\\\text{else}\\\\end{cases}<\/script>。而 <script type=\\"math/tex\\">f[l][r]<\/script> 关于 <script type=\\"math/tex\\">l<\/script> 是单调不减的，于是可以通过二分找到是否加一的分界点，然后进行区间加一操作即可，这里我使用了树状数组来完成。复杂度为 <script type=\\"math/tex\\">O(n\\\\log^2 n)<\/script>\\n</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">Q</span> <span class=\\"p\\">{</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span><span class=\\"p\\">;</span> <span class=\\"p\\">};</span>\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">BIT</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">bit</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">BIT</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">)</span><span class=\\"o\\">:</span> <span class=\\"n\\">bit</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"mi\\">2</span><span class=\\"p\\">),</span> <span class=\\"n\\">n</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"p\\">)</span> <span class=\\"p\\">{}</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span> <span class=\\"k\\">return</span> <span class=\\"n\\">i</span><span class=\\"o\\">&amp;-</span><span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">void</span> <span class=\\"n\\">add1</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">void</span> <span class=\\"n\\">add</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">r</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">add1</span><span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">x</span><span class=\\"p\\">),</span> <span class=\\"n\\">add1</span><span class=\\"p\\">(</span><span class=\\"n\\">r</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"o\\">-</span><span class=\\"n\\">x</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">query</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">res</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">res</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">res</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">};</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">nq</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">n</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">nq</span><span class=\\"p\\">;</span>\\n\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">a</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">),</span> <span class=\\"n\\">ans</span><span class=\\"p\\">(</span><span class=\\"n\\">nq</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">Q</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">q</span><span class=\\"p\\">(</span><span class=\\"n\\">nq</span><span class=\\"p\\">);</span>\\n\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">nq</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">l</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">r</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span><span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"o\\">+</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">r</span><span class=\\"p\\">};</span>\\n  <span class=\\"p\\">}</span>\\n\\n  <span class=\\"n\\">sort</span><span class=\\"p\\">(</span><span class=\\"n\\">q</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">q</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">(),</span> <span class=\\"p\\">[](</span><span class=\\"n\\">Q</span><span class=\\"o\\">&amp;</span> <span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">Q</span><span class=\\"o\\">&amp;</span> <span class=\\"n\\">b</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">a</span><span class=\\"p\\">.</span><span class=\\"n\\">r</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">b</span><span class=\\"p\\">.</span><span class=\\"n\\">r</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">});</span>\\n\\n  <span class=\\"n\\">BIT</span> <span class=\\"n\\">bit</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"p\\">);</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">i</span> <span class=\\"o\\">&gt;=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"p\\">{</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n        <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">;</span>\\n        <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">query</span><span class=\\"p\\">(</span><span class=\\"n\\">m</span><span class=\\"p\\">)</span> <span class=\\"o\\">&gt;=</span> <span class=\\"n\\">i</span><span class=\\"o\\">-</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n        <span class=\\"k\\">else</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n      <span class=\\"p\\">}</span>\\n      <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"p\\">)</span> <span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">add</span><span class=\\"p\\">(</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">nq</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">j</span><span class=\\"p\\">].</span><span class=\\"n\\">r</span> <span class=\\"o\\">==</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n      <span class=\\"n\\">ans</span><span class=\\"p\\">[</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">j</span><span class=\\"p\\">].</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">query</span><span class=\\"p\\">(</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">j</span><span class=\\"p\\">].</span><span class=\\"n\\">l</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span> <span class=\\"nl\\">x</span><span class=\\"p\\">:</span> <span class=\\"n\\">ans</span><span class=\\"p\\">)</span> <span class=\\"n\\">cout</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"n\\">x</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"sc\\">&#39;\\\\n&#39;</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"data structures","url":"/tags/data-structures"},{"name":"divide-and-conquer","url":"/tags/divide-and-conquer"},{"name":"dp","url":"/tags/dp"}],"title":"CF-1404C Fixed Point Removal","updated_at":"2020-10-17T10:05:41+08:00","url":"/docs/data-structures/segment-tree/cf-1404c"}')}}]);
//# sourceMappingURL=chunk-2d216c06.ab178c53.js.map