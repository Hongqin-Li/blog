(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0a3c8c"],{"043e":function(s){s.exports=JSON.parse('{"created_at":"2022-01-26T22:45:21+08:00","excerpt":"Erwin 最近对一种叫 `thair` 的东西巨感兴趣。。。","html":"<p>Erwin 最近对一种叫 <code>thair</code> 的东西巨感兴趣。。。</p>\\n<p>在含有 <script type=\\"math/tex\\">n<\/script> 个整数的序列 <script type=\\"math/tex\\">a_1,a_2,\\\\ldots,a_n<\/script> 中，三个数被称作 <code>thair</code> 当且仅当 <script type=\\"math/tex\\">i<j<k<\/script> 且 <script type=\\"math/tex\\">a_i<a_j<a_k<\/script>。</p>\\n<p>求一个序列中 <code>thair</code> 的个数。</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>开始一行一个正整数 <script type=\\"math/tex\\">n<\/script>,</p>\\n<p>以后一行 <script type=\\"math/tex\\">n<\/script> 个整数 <script type=\\"math/tex\\">a_1,a_2,\\\\ldots,a_n<\/script>。</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>一行一个整数表示 thair 的个数。</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<p>Input 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>4\\n2 1 3 4\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5\\n1 2 2 3 4\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<p>Output 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>2\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>7\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>下标从大到小遍历，维护左端点值为i的上升对的数量和值为i的元素的数量，离散化后用两个树状数组维护即可。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;cstdio&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;vector&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;algorithm&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">typedef</span> <span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span> <span class=\\"n\\">ll</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">MAXN</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">3e4</span><span class=\\"o\\">+</span><span class=\\"mi\\">3</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">BIT</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">ll</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n  <span class=\\"kr\\">inline</span> <span class=\\"kt\\">int</span> <span class=\\"nf\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span> <span class=\\"k\\">return</span> <span class=\\"n\\">i</span><span class=\\"o\\">&amp;-</span><span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">void</span> <span class=\\"nf\\">add</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"n\\">ll</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">ll</span> <span class=\\"nf\\">sum</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">ll</span> <span class=\\"n\\">ans</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">ans</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">ans</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">ll</span> <span class=\\"nf\\">query</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">sum</span><span class=\\"p\\">(</span><span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"o\\">-</span> <span class=\\"n\\">sum</span><span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">bp</span><span class=\\"p\\">,</span> <span class=\\"n\\">bv</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">ll</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">a</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">ll</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">val</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">reserve</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span><span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]);</span>\\n    <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]);</span>\\n  <span class=\\"p\\">}</span>\\n\\n  <span class=\\"n\\">sort</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">());</span>\\n  <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">resize</span><span class=\\"p\\">(</span><span class=\\"n\\">unique</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">())</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">());</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span><span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">(),</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">()</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n\\n  <span class=\\"n\\">ll</span> <span class=\\"n\\">ans</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&gt;=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">--</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">ll</span> <span class=\\"n\\">npairs</span> <span class=\\"o\\">=</span> <span class=\\"n\\">bp</span><span class=\\"p\\">.</span><span class=\\"n\\">query</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">ll</span> <span class=\\"n\\">nlarger</span> <span class=\\"o\\">=</span> <span class=\\"n\\">bv</span><span class=\\"p\\">.</span><span class=\\"n\\">query</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">bp</span><span class=\\"p\\">.</span><span class=\\"n\\">add</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">],</span> <span class=\\"n\\">nlarger</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">bv</span><span class=\\"p\\">.</span><span class=\\"n\\">add</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">],</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">ans</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">npairs</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">ans</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"data structures","url":"/tags/data-structures"}],"title":"洛谷-P1637 三元上升子序列","updated_at":"2022-01-26T22:45:21+08:00","url":"/docs/data-structures/segment-tree/luogu-1637"}')}}]);
//# sourceMappingURL=chunk-2d0a3c8c.0e84771a.js.map