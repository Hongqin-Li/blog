(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e1d8f"],{"7bd2":function(s){s.exports=JSON.parse('{"created_at":"2022-01-26T22:47:05+08:00","excerpt":"Furik and Rubik take part in a relay race. The race will be set up on a large square with the side of $n$ meters. The given square is split into n×n n×n n×n cells (represented as unit squares), each cell has some number.","html":"<p>Furik and Rubik take part in a relay race. The race will be set up on a large square with the side of <script type=\\"math/tex\\">n<\/script> meters. The given square is split into n×n n×n n×n cells (represented as unit squares), each cell has some number.</p>\\n<p>At the beginning of the race Furik stands in a cell with coordinates <script type=\\"math/tex\\">(1,1)<\/script>, and Rubik stands in a cell with coordinates <script type=\\"math/tex\\">(n,n)<\/script>. Right after the start Furik runs towards Rubik, besides, if Furik stands at a cell with coordinates <script type=\\"math/tex\\">(i,j)<\/script>, then he can move to cell <script type=\\"math/tex\\">(i+1,j)<\/script> or <script type=\\"math/tex\\">(i,j+1)<\/script>. After Furik reaches Rubik, Rubik starts running from cell with coordinates <script type=\\"math/tex\\">(n,n)<\/script> to cell with coordinates <script type=\\"math/tex\\">(1,1)<\/script>. If Rubik stands in cell <script type=\\"math/tex\\">(i,j)<\/script>, then he can move to cell <script type=\\"math/tex\\">(i-1,j)<\/script> or <script type=\\"math/tex\\">(i,j-1)<\/script>. Neither Furik, nor Rubik are allowed to go beyond the boundaries of the field; if a player goes beyond the boundaries, he will be disqualified.</p>\\n<p>To win the race, Furik and Rubik must earn as many points as possible. The number of points is the sum of numbers from the cells Furik and Rubik visited. Each cell counts only once in the sum.</p>\\n<p>Print the maximum number of points Furik and Rubik can earn on the relay race.</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>The first line contains a single integer <script type=\\"math/tex\\">n(1\\\\le n\\\\le 300)<\/script>. The next <script type=\\"math/tex\\">n<\/script> lines contain <script type=\\"math/tex\\">n<\/script> integers each: the <script type=\\"math/tex\\">j<\/script>-th number on the <script type=\\"math/tex\\">i<\/script>-th line <script type=\\"math/tex\\">a_{i,j} (−1000\\\\le a_{i,j}\\\\le 1000)<\/script> is the number written in the cell with coordinates <script type=\\"math/tex\\">(i,j)<\/script> .</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>On a single line print a single number — the answer to the problem.</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<p>Input 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>2\\n11 14\\n16 12\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>3\\n25 16 25\\n12 18 19\\n11 13 8\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<p>Output 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>53\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>136\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>按斜线dp，深度为 <script type=\\"math/tex\\">d<\/script> 的点 <script type=\\"math/tex\\">(i, j)<\/script> 均满足 <script type=\\"math/tex\\">i+j=d<\/script>，并给此斜线上的点从左下到右标上下。因为每一次移动必使得深度+1，而当前深度的斜线上的所有状态只依赖于上一深度的斜线上所有状态。令 <script type=\\"math/tex\\">f[cur][i][j]<\/script> 为路径两端点分别是当前深度第 <script type=\\"math/tex\\">i<\/script> 和 <script type=\\"math/tex\\">j<\/script> 个点的路径权重和，类似的 <script type=\\"math/tex\\">f[cur\\\\oplus 1][i][j]<\/script> 为上一深度的状态，状态方程显然。其中cur为 0 或 1，因为只需保存上一个状态即可，这样就不会 MLE。复杂度为 <script type=\\"math/tex\\">O(n^3)<\/script>，注意加上常数优化，<script type=\\"math/tex\\">f[cur][i][j]<\/script> 只算 <script type=\\"math/tex\\">i\\\\le j<\/script> 的部分即可。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">MAXN</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">303</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">INF</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e9</span><span class=\\"p\\">;</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">][</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"mi\\">2</span><span class=\\"p\\">][</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">][</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"k\\">typedef</span> <span class=\\"n\\">pair</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">pii</span><span class=\\"p\\">;</span>\\n<span class=\\"kr\\">inline</span> <span class=\\"n\\">pii</span> <span class=\\"nf\\">pos</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">d</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">d</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">)</span> <span class=\\"k\\">return</span> <span class=\\"p\\">{</span><span class=\\"n\\">d</span><span class=\\"o\\">-</span><span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"n\\">i</span><span class=\\"p\\">};</span>\\n  <span class=\\"k\\">else</span> <span class=\\"k\\">return</span> <span class=\\"p\\">{</span><span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"o\\">-</span><span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"n\\">d</span><span class=\\"o\\">-</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">+</span><span class=\\"n\\">i</span><span class=\\"p\\">};</span>\\n<span class=\\"p\\">}</span>\\n<span class=\\"kr\\">inline</span> <span class=\\"kt\\">int</span> <span class=\\"nf\\">toi</span><span class=\\"p\\">(</span><span class=\\"n\\">pii</span> <span class=\\"n\\">p</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"k\\">return</span> <span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span> <span class=\\"o\\">+</span> <span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">second</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span> <span class=\\"o\\">?</span> <span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"nl\\">second</span><span class=\\"p\\">:</span> <span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"o\\">-</span><span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kr\\">inline</span> <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">pre</span><span class=\\"p\\">(</span><span class=\\"n\\">pii</span> <span class=\\"n\\">p</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">ret</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">ret</span><span class=\\"p\\">.</span><span class=\\"n\\">reserve</span><span class=\\"p\\">(</span><span class=\\"mi\\">2</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span> <span class=\\"o\\">&gt;</span> <span class=\\"mi\\">0</span><span class=\\"p\\">)</span> <span class=\\"n\\">ret</span><span class=\\"p\\">.</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">toi</span><span class=\\"p\\">({</span><span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">second</span><span class=\\"p\\">}));</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">second</span> <span class=\\"o\\">&gt;</span> <span class=\\"mi\\">0</span><span class=\\"p\\">)</span> <span class=\\"n\\">ret</span><span class=\\"p\\">.</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">toi</span><span class=\\"p\\">({</span><span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span><span class=\\"p\\">,</span> <span class=\\"n\\">p</span><span class=\\"p\\">.</span><span class=\\"n\\">second</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">}));</span>\\n  <span class=\\"k\\">return</span> <span class=\\"n\\">ret</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n      <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">][</span><span class=\\"n\\">j</span><span class=\\"p\\">]);</span>\\n\\n  <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">][</span><span class=\\"mi\\">0</span><span class=\\"p\\">][</span><span class=\\"mi\\">0</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">][</span><span class=\\"mi\\">0</span><span class=\\"p\\">];</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">cur</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">md</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">2</span><span class=\\"o\\">*</span><span class=\\"n\\">n</span> <span class=\\"o\\">-</span> <span class=\\"mi\\">2</span><span class=\\"p\\">;</span>\\n\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">d</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">d</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">md</span><span class=\\"p\\">;</span> <span class=\\"n\\">d</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">len</span> <span class=\\"o\\">=</span> <span class=\\"n\\">d</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span> <span class=\\"o\\">?</span> <span class=\\"n\\">d</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"o\\">:</span> <span class=\\"n\\">md</span><span class=\\"o\\">-</span><span class=\\"n\\">d</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">len</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">len</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n        <span class=\\"n\\">pii</span> <span class=\\"n\\">pi</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pos</span><span class=\\"p\\">(</span><span class=\\"n\\">d</span><span class=\\"p\\">,</span> <span class=\\"n\\">i</span><span class=\\"p\\">),</span> <span class=\\"n\\">pj</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pos</span><span class=\\"p\\">(</span><span class=\\"n\\">d</span><span class=\\"p\\">,</span> <span class=\\"n\\">j</span><span class=\\"p\\">);</span>\\n        <span class=\\"k\\">auto</span> <span class=\\"n\\">ci</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pre</span><span class=\\"p\\">(</span><span class=\\"n\\">pi</span><span class=\\"p\\">),</span> <span class=\\"n\\">cj</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pre</span><span class=\\"p\\">(</span><span class=\\"n\\">pj</span><span class=\\"p\\">);</span>\\n\\n        <span class=\\"kt\\">int</span> <span class=\\"n\\">dx</span> <span class=\\"o\\">=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">pi</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span><span class=\\"p\\">][</span><span class=\\"n\\">pi</span><span class=\\"p\\">.</span><span class=\\"n\\">second</span><span class=\\"p\\">];</span>\\n        <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">i</span> <span class=\\"o\\">!=</span> <span class=\\"n\\">j</span><span class=\\"p\\">)</span> <span class=\\"n\\">dx</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">pj</span><span class=\\"p\\">.</span><span class=\\"n\\">first</span><span class=\\"p\\">][</span><span class=\\"n\\">pj</span><span class=\\"p\\">.</span><span class=\\"n\\">second</span><span class=\\"p\\">];</span>\\n\\n        <span class=\\"kt\\">int</span> <span class=\\"n\\">maxx</span> <span class=\\"o\\">=</span> <span class=\\"o\\">-</span><span class=\\"n\\">INF</span><span class=\\"p\\">;</span>\\n        <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span> <span class=\\"nl\\">x</span><span class=\\"p\\">:</span> <span class=\\"n\\">ci</span><span class=\\"p\\">)</span>\\n          <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span> <span class=\\"nl\\">y</span><span class=\\"p\\">:</span> <span class=\\"n\\">cj</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n            <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">x</span> <span class=\\"o\\">&gt;</span> <span class=\\"n\\">y</span><span class=\\"p\\">)</span> <span class=\\"n\\">swap</span><span class=\\"p\\">(</span><span class=\\"n\\">x</span><span class=\\"p\\">,</span> <span class=\\"n\\">y</span><span class=\\"p\\">);</span>\\n            <span class=\\"n\\">maxx</span> <span class=\\"o\\">=</span> <span class=\\"n\\">max</span><span class=\\"p\\">(</span><span class=\\"n\\">maxx</span><span class=\\"p\\">,</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"o\\">^</span><span class=\\"mi\\">1</span><span class=\\"p\\">][</span><span class=\\"n\\">x</span><span class=\\"p\\">][</span><span class=\\"n\\">y</span><span class=\\"p\\">]);</span>\\n          <span class=\\"p\\">}</span>\\n        <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"p\\">][</span><span class=\\"n\\">i</span><span class=\\"p\\">][</span><span class=\\"n\\">j</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">maxx</span> <span class=\\"o\\">+</span> <span class=\\"n\\">dx</span><span class=\\"p\\">;</span>\\n      <span class=\\"p\\">}</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"n\\">cur</span> <span class=\\"o\\">^=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"o\\">^</span><span class=\\"mi\\">1</span><span class=\\"p\\">][</span><span class=\\"mi\\">0</span><span class=\\"p\\">][</span><span class=\\"mi\\">0</span><span class=\\"p\\">]);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"dp","url":"/tags/dp"}],"title":"CF-213C Relay Race","updated_at":"2022-01-26T22:47:05+08:00","url":"/docs/acm/dp/cf-213c"}')}}]);
//# sourceMappingURL=chunk-2d0e1d8f.8f60ab09.js.map