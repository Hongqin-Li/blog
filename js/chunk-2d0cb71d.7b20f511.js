(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0cb71d"],{"4a60":function(s){s.exports=JSON.parse('{"created_at":"2020-10-17T10:05:41+08:00","excerpt":"出于某些方面的需求，我们要把一块 $N\\\\times M$ 的木板切成一个个 $1\\\\times 1$ 的小方块。","html":"<p>出于某些方面的需求，我们要把一块 <script type=\\"math/tex\\">N\\\\times M<\/script> 的木板切成一个个 <script type=\\"math/tex\\">1\\\\times 1<\/script> 的小方块。</p>\\n<p>对于一块木板，我们只能从某条横线或者某条竖线（要在方格线上），而且这木板是不均匀的，从不同的线切割下去要花不同的代价。而且，对于一块木板，切割一次以后就被分割成两块，而且不能把这两块木板拼在一起然后一刀切成四块，只能两块分别再进行一次切割。</p>\\n<p>现在，给出从不同的线切割所要花的代价，求把整块木板分割成 <script type=\\"math/tex\\">1\\\\times 1<\/script> 块小方块所需要耗费的最小代价。</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>第一行包括 <script type=\\"math/tex\\">N<\/script> 和 <script type=\\"math/tex\\">M<\/script>，表示长 <script type=\\"math/tex\\">N<\/script> 宽 <script type=\\"math/tex\\">M<\/script> 的矩阵。</p>\\n<p>第二行包括 <script type=\\"math/tex\\">N-1<\/script> 个非负整数，分别表示沿着 <script type=\\"math/tex\\">N-1<\/script> 条横线切割的代价。</p>\\n<p>第三行包括 <script type=\\"math/tex\\">M-1<\/script> 个非负整数，分别表示沿着 <script type=\\"math/tex\\">M-1<\/script> 条竖线切割的代价。</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>一个整数，表示最小代价。</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>2 2\\n3\\n3\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>9\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>贪心，令 <script type=\\"math/tex\\">m = m_1 + m_2, n = n_1+n_2<\/script>，解递推式 <script type=\\"math/tex\\">f(m, n) = f(m_1, n) + f(m_2, n) = f(m, n_1) + f(m, n_2)<\/script>，可知切的次数恰为 <script type=\\"math/tex\\">N\\\\cdot M-1<\/script>。由于总次数是固定的，要想代价大的切法（某一行/列）次数最小，尽可能地早切，且要切完（从左切到右/从上切到下）</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">MAXN</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">4005</span><span class=\\"p\\">;</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">Cut</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">cost</span><span class=\\"p\\">,</span> <span class=\\"n\\">type</span><span class=\\"p\\">;</span>\\n  <span class=\\"kt\\">bool</span> <span class=\\"k\\">operator</span><span class=\\"o\\">&lt;</span><span class=\\"p\\">(</span><span class=\\"k\\">const</span> <span class=\\"k\\">struct</span> <span class=\\"n\\">Cut</span><span class=\\"o\\">&amp;</span> <span class=\\"n\\">rhs</span><span class=\\"p\\">)</span> <span class=\\"k\\">const</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">cost</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">rhs</span><span class=\\"p\\">.</span><span class=\\"n\\">cost</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">m</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span> <span class=\\"o\\">+</span> <span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">cost</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">type</span> <span class=\\"o\\">=</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span> <span class=\\"o\\">?</span> <span class=\\"mi\\">0</span><span class=\\"o\\">:</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">sort</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span> <span class=\\"o\\">+</span> <span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">2</span><span class=\\"p\\">));</span>\\n  <span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span> <span class=\\"n\\">ans</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">cx</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">cy</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">2</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&gt;=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">--</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"o\\">!</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">type</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"n\\">ans</span> <span class=\\"o\\">+=</span> <span class=\\"p\\">(</span><span class=\\"n\\">cy</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">*</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">cost</span><span class=\\"p\\">;</span>\\n      <span class=\\"n\\">cx</span> <span class=\\"o\\">++</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"k\\">else</span> <span class=\\"p\\">{</span>\\n      <span class=\\"n\\">ans</span> <span class=\\"o\\">+=</span> <span class=\\"p\\">(</span><span class=\\"n\\">cx</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">*</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">cost</span><span class=\\"p\\">;</span>\\n      <span class=\\"n\\">cy</span> <span class=\\"o\\">++</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">ans</span><span class=\\"p\\">);</span>\\n\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"greedy","url":"/tags/greedy"}],"title":"洛谷-P1324 矩形分割","updated_at":"2020-10-17T10:05:41+08:00","url":"/docs/acm/greedy/luogu-P1324"}')}}]);
//# sourceMappingURL=chunk-2d0cb71d.7b20f511.js.map