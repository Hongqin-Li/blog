(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0ba6ce"],{"36c8":function(s){s.exports=JSON.parse('{"created_at":"2022-01-19T23:40:55+08:00","excerpt":"A festival will be held in a town\'s main street. There are $n$ sections in the main street. The sections are numbered $1$ through $n$ from left to right. The distance between each adjacent sections is $1$ .","html":"<p>A festival will be held in a town\'s main street. There are <script type=\\"math/tex\\">n<\/script> sections in the main street. The sections are numbered <script type=\\"math/tex\\">1<\/script> through <script type=\\"math/tex\\">n<\/script> from left to right. The distance between each adjacent sections is <script type=\\"math/tex\\">1<\/script> .</p>\\n<p>In the festival <script type=\\"math/tex\\">m<\/script> fireworks will be launched. The <script type=\\"math/tex\\">i<\/script>-th <script type=\\"math/tex\\">(1\\\\le i\\\\le m)<\/script> launching is on time <script type=\\"math/tex\\">t_{i}<\/script> at section <script type=\\"math/tex\\">a_{i}<\/script>. If you are at section <script type=\\"math/tex\\">x (1\\\\le x\\\\le n)<\/script> at the time of <script type=\\"math/tex\\">i<\/script>-th launching, you\'ll gain happiness value <script type=\\"math/tex\\">b_{i}-|a_{i}-x|<\/script> (note that the happiness value might be a negative value).</p>\\n<p>You can move up to <script type=\\"math/tex\\">d<\/script> length units in a unit time interval, but it\'s prohibited to go out of the main street. Also you can be in an arbitrary section at initial time moment (time equals to <script type=\\"math/tex\\">1<\/script> ), and want to maximize the sum of happiness that can be gained from watching fireworks. Find the maximum total happiness.</p>\\n<p>Note that two or more fireworks can be launched at the same time.</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>The first line contains three integers <script type=\\"math/tex\\">n, m, d ( 1\\\\le n\\\\le 150000; 1\\\\le m\\\\le 300; 1\\\\le d\\\\le n )<\/script>.</p>\\n<p>Each of the next <script type=\\"math/tex\\">m<\/script> lines contains integers <script type=\\"math/tex\\">a_{i}, b_{i}, t_{i} (1<=a_{i}<=n; 1<=b_{i}<=10^{9}; 1<=t_{i}<=10^{9})<\/script>. The <script type=\\"math/tex\\">i<\/script>-th line contains description of the <script type=\\"math/tex\\">i<\/script>-th launching.</p>\\n<p>It is guaranteed that the condition <script type=\\"math/tex\\">t_{i}<=t_{i+1} (1\\\\le i < m)<\/script> will be satisfied.</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>Print a single integer  the maximum sum of happiness that you can gain from watching all the fireworks.</p>\\n<p>Please, do not write the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.</p>\\n<h2 id=\\"examples\\">Examples</h2>\\n<p>Input 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>50 3 1\\n49 1 1\\n26 1 4\\n6 1 10\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>-31\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>10 2 1\\n1 1000 4\\n9 1000 4\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>1992\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>单调队列优化 dp</p>\\n<p>基本转移方程如下，<script type=\\"math/tex\\">f[t][x]<\/script> 表示 <script type=\\"math/tex\\">t<\/script> 时刻在位置 <script type=\\"math/tex\\">x<\/script> 时累计最大开心度。显然 t 可以离散化，由于输入已经对时间排好序了，实现时只需维护一个区间即可，同时记得把 <script type=\\"math/tex\\">d<\/script> 乘上时间差。然后使用滚动数组dp</p>\\n<p>\\n<script type=\\"math/tex; mode=display\\">\\nf[t][x] = \\\\sum (b_i - |a_i - x|) \\\\max_{-d \\\\le y\\\\le d} f[t-1][y]\\n<\/script>\\n</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">using</span> <span class=\\"n\\">ll</span> <span class=\\"o\\">=</span> <span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">N</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">2e5</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"n\\">ll</span> <span class=\\"n\\">INF</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e18</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"n\\">ll</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">],</span> <span class=\\"n\\">b</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">],</span> <span class=\\"n\\">t</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">];</span>\\n<span class=\\"n\\">ll</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"mi\\">2</span><span class=\\"p\\">][</span><span class=\\"n\\">N</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span><span class=\\"p\\">,</span> <span class=\\"n\\">d</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">n</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">m</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">d</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">b</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">t</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">cur</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">ll</span> <span class=\\"n\\">dx</span> <span class=\\"o\\">=</span> <span class=\\"n\\">INF</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">r</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">cur</span> <span class=\\"o\\">^=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"n\\">r</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">r</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">t</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"p\\">]</span> <span class=\\"o\\">==</span> <span class=\\"n\\">t</span><span class=\\"p\\">[</span><span class=\\"n\\">r</span><span class=\\"p\\">])</span> <span class=\\"n\\">r</span> <span class=\\"o\\">++</span><span class=\\"p\\">;</span>\\n\\n    <span class=\\"k\\">static</span> <span class=\\"n\\">pair</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"p\\">,</span> <span class=\\"n\\">ll</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">];</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">ql</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">qr</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">x</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">x</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">x</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">ql</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">qr</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">ql</span><span class=\\"p\\">].</span><span class=\\"n\\">first</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">x</span> <span class=\\"o\\">-</span> <span class=\\"n\\">dx</span><span class=\\"p\\">)</span> <span class=\\"n\\">ql</span> <span class=\\"o\\">++</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">x</span> <span class=\\"o\\">+</span> <span class=\\"n\\">dx</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n        <span class=\\"n\\">ll</span> <span class=\\"n\\">v</span> <span class=\\"o\\">=</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"o\\">^</span><span class=\\"mi\\">1</span><span class=\\"p\\">][</span><span class=\\"n\\">j</span><span class=\\"p\\">];</span>\\n        <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">ql</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">qr</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">qr</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">].</span><span class=\\"n\\">second</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">v</span><span class=\\"p\\">)</span> <span class=\\"n\\">qr</span> <span class=\\"o\\">--</span><span class=\\"p\\">;</span>\\n        <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">qr</span><span class=\\"o\\">++</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span><span class=\\"n\\">j</span><span class=\\"p\\">,</span> <span class=\\"n\\">v</span><span class=\\"p\\">};</span>\\n      <span class=\\"p\\">}</span>\\n      <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"p\\">][</span><span class=\\"n\\">x</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">ql</span><span class=\\"p\\">].</span><span class=\\"n\\">second</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"n\\">l</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">r</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n        <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"p\\">][</span><span class=\\"n\\">x</span><span class=\\"p\\">]</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">b</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">-</span> <span class=\\"n\\">abs</span><span class=\\"p\\">(</span><span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">-</span> <span class=\\"n\\">x</span><span class=\\"p\\">);</span>\\n    <span class=\\"p\\">}</span>\\n\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">r</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">)</span> <span class=\\"n\\">dx</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">t</span><span class=\\"p\\">[</span><span class=\\"n\\">r</span><span class=\\"p\\">]</span> <span class=\\"o\\">-</span> <span class=\\"n\\">t</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"p\\">])</span> <span class=\\"o\\">*</span> <span class=\\"n\\">d</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">cout</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"o\\">*</span><span class=\\"n\\">max_element</span><span class=\\"p\\">(</span><span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"o\\">^</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">cur</span><span class=\\"o\\">^</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span><span class=\\"o\\">+</span><span class=\\"n\\">n</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"dp","url":"/tags/dp"},{"name":"data structures","url":"/tags/data-structures"}],"title":"CF-372C Watching Fireworks is Fun","updated_at":"2022-01-19T23:40:55+08:00","url":"/docs/dp/dp-optimization/cf-372c"}')}}]);
//# sourceMappingURL=chunk-2d0ba6ce.d211a01f.js.map