(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2163ea"],{c249:function(s){s.exports=JSON.parse('{"created_at":"2022-01-26T22:45:21+08:00","excerpt":"You are given a rooted tree with $n$ nodes, labeled from $1$ to $n$ . The tree is rooted at node $1$ . The parent of the $i$-th node is $p_i$. A leaf is node with no children. For a given set of leaves $L$, let $f(L)$ denote the smallest connected subgraph that contains all leaves $L$.","html":"<p>You are given a rooted tree with <script type=\\"math/tex\\">n<\/script> nodes, labeled from <script type=\\"math/tex\\">1<\/script> to <script type=\\"math/tex\\">n<\/script> . The tree is rooted at node <script type=\\"math/tex\\">1<\/script> . The parent of the <script type=\\"math/tex\\">i<\/script>-th node is <script type=\\"math/tex\\">p_i<\/script>. A leaf is node with no children. For a given set of leaves <script type=\\"math/tex\\">L<\/script>, let <script type=\\"math/tex\\">f(L)<\/script> denote the smallest connected subgraph that contains all leaves <script type=\\"math/tex\\">L<\/script>.</p>\\n<p>You would like to partition the leaves such that for any two different sets <script type=\\"math/tex\\">x, y<\/script> of the partition, <script type=\\"math/tex\\">f(x)<\/script> and <script type=\\"math/tex\\">f(y)<\/script> are disjoint.</p>\\n<p>Count the number of ways to partition the leaves, modulo <script type=\\"math/tex\\">998244353<\/script>. Two ways are different if there are two leaves such that they are in the same set in one way but in different sets in the other.</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>The first line contains an integer <script type=\\"math/tex\\">n (2 \\\\leq n \\\\leq 200,000)<\/script> — the number of nodes in the tree.</p>\\n<p>The next line contains <script type=\\"math/tex\\">n-1<\/script> integers <script type=\\"math/tex\\">p_2, p_3, \\\\ldots, p_n (1 \\\\leq p_i < i)<\/script>.</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>Print a single integer, the number of ways to partition the leaves, modulo <script type=\\"math/tex\\">998244353<\/script>.</p>\\n<h2 id=\\"examples\\">Examples</h2>\\n<p>Input 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5\\n1 1 1 1\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>12\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>10\\n1 2 3 4 5 6 7 8 9\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>1\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 3:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>10\\n1 1 1 2 2 3 3 4 4\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 3:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>89\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>根 u 的子树中的划分情况可以分为两种，一是根属于其中一个 <script type=\\"math/tex\\">f(x)<\/script>，另一种是根不属于<del>（废话）</del>。然后我们令 <script type=\\"math/tex\\">f[u]<\/script> 为这两种情况之和（显然，答案即 <script type=\\"math/tex\\">f[root]<\/script>），<script type=\\"math/tex\\">g[u]<\/script> 为第一种情况的个数 + 第二种情况但将某一个<script type=\\"math/tex\\">f(x)<\/script>延伸至根的个数。</p>\\n<p>考虑如何从子节点 <script type=\\"math/tex\\">v_i<\/script> 转移到父节点 <script type=\\"math/tex\\">u<\/script>，易知 <script type=\\"math/tex\\">f[u]<\/script> 为不合并子节点的划分数量 + 合并多个子节点的划分数。而合并多个节点则需要考虑 <script type=\\"math/tex\\">g[u]<\/script>，因为这些情况才可能合并（这也是为什么之前定义含有“延伸至根”，因为一个第二种情况可能延伸出多个）。模拟一下，假设有三个子节点 <script type=\\"math/tex\\">v_1, v_2, v_3<\/script>，则（为了符号简洁，令 <script type=\\"math/tex\\">f_i = f[v_i]<\/script>，求和、连乘下标均为 <script type=\\"math/tex\\">1\\\\sim 3<\/script>）</p>\\n<p>\\n<script type=\\"math/tex; mode=display\\">\\n\\\\begin{aligned}\\nf[u]\\n=& f_1 \\\\cdot f_2 \\\\cdot f_3 +\\n (g_1\\\\cdot g_2\\\\cdot f_3 + g_1 \\\\cdot f_2 \\\\cdot g_3 + f_1 \\\\cdot g_2 \\\\cdot g_3) + \\n (g_1 \\\\cdot g_2 \\\\cdot g_3) \\\\\\\\\\n=& \\\\prod (f_i + g_i) - \\\\sum \\\\frac{g_k}{f_k} \\\\cdot \\\\prod f_i \\\\\\\\\\n\\\\end{aligned}\\n<\/script>\\n</p>\\n<p>第一个等号中各项分别表示不合并子节点、合并两个子节点、合并三个子结点的个数。整理一下可得第二个等号（其中减去的第二项是因为不能合并仅一个子节点），可以用前缀积和后缀积避免零元。</p>\\n<p>类似可得 <script type=\\"math/tex\\">g[u] = \\\\prod (f_i + g_i) - \\\\prod f_i<\/script>，其实就是总情况减去根不属于某个 <script type=\\"math/tex\\">f(x)<\/script>，即没合并。接下来就是常规树形dp了。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">typedef</span> <span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span> <span class=\\"n\\">ll</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">N</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">2e5</span><span class=\\"o\\">+</span><span class=\\"mi\\">3</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"n\\">ll</span> <span class=\\"n\\">M</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">998244353</span><span class=\\"p\\">;</span>\\n<span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">];</span>\\n<span class=\\"n\\">ll</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">],</span> <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"kt\\">void</span> <span class=\\"nf\\">dfs</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">u</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"k\\">static</span> <span class=\\"n\\">ll</span> <span class=\\"n\\">pre</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">],</span> <span class=\\"n\\">post</span><span class=\\"p\\">[</span><span class=\\"n\\">N</span><span class=\\"p\\">];</span>\\n\\n  <span class=\\"n\\">ll</span> <span class=\\"n\\">pf</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">pfg</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">d</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span> <span class=\\"nl\\">v</span><span class=\\"p\\">:</span> <span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">])</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">dfs</span><span class=\\"p\\">(</span><span class=\\"n\\">v</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">pf</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pf</span> <span class=\\"o\\">*</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">v</span><span class=\\"p\\">]</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">pfg</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pfg</span> <span class=\\"o\\">*</span> <span class=\\"p\\">(</span><span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">v</span><span class=\\"p\\">]</span> <span class=\\"o\\">+</span> <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">v</span><span class=\\"p\\">])</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">n</span> <span class=\\"o\\">=</span> <span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">].</span><span class=\\"n\\">size</span><span class=\\"p\\">();</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"p\\">)</span> <span class=\\"n\\">pre</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">post</span><span class=\\"p\\">[</span><span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">pre</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pre</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span> <span class=\\"o\\">*</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">][</span><span class=\\"n\\">i</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">]]</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">,</span>\\n    <span class=\\"n\\">post</span><span class=\\"p\\">[</span><span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"o\\">-</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">post</span><span class=\\"p\\">[</span><span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">*</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">][</span><span class=\\"n\\">n</span><span class=\\"o\\">-</span><span class=\\"n\\">i</span><span class=\\"p\\">]]</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">;</span>\\n\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">d</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">d</span> <span class=\\"o\\">+</span> <span class=\\"p\\">(</span><span class=\\"n\\">pre</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">*</span> <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">][</span><span class=\\"n\\">i</span><span class=\\"p\\">]]</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">)</span> <span class=\\"o\\">*</span> <span class=\\"n\\">post</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">;</span>\\n\\n  <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">pfg</span> <span class=\\"o\\">-</span> <span class=\\"n\\">d</span> <span class=\\"o\\">+</span> <span class=\\"n\\">M</span><span class=\\"p\\">)</span> <span class=\\"o\\">%</span> <span class=\\"n\\">M</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">u</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">n</span> <span class=\\"o\\">?</span> <span class=\\"p\\">(</span><span class=\\"n\\">pfg</span> <span class=\\"o\\">-</span> <span class=\\"n\\">pf</span> <span class=\\"o\\">+</span> <span class=\\"n\\">M</span><span class=\\"p\\">)</span> <span class=\\"o\\">%</span> <span class=\\"nl\\">M</span><span class=\\"p\\">:</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">u</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">2</span><span class=\\"p\\">,</span> <span class=\\"n\\">fa</span><span class=\\"p\\">;</span> <span class=\\"n\\">u</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">u</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">fa</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">adj</span><span class=\\"p\\">[</span><span class=\\"n\\">fa</span><span class=\\"p\\">].</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">u</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">dfs</span><span class=\\"p\\">(</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"mi\\">1</span><span class=\\"p\\">]);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"dp","url":"/tags/dp"}],"title":"CF-1146F Leaf Partition","updated_at":"2022-01-26T22:45:21+08:00","url":"/docs/dp/tree-based-dp/cf-1146f"}')}}]);
//# sourceMappingURL=chunk-2d2163ea.efb7f7bd.js.map