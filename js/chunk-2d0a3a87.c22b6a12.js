(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0a3a87"],{"02b1":function(s){s.exports=JSON.parse('{"created_at":"2022-01-26T22:45:21+08:00","excerpt":"给定一个含有 $n$ 个数的序列 $a_1,a_2 \\\\dots a_n$，需要支持两种操作：","html":"<p>给定一个含有 <script type=\\"math/tex\\">n<\/script> 个数的序列 <script type=\\"math/tex\\">a_1,a_2 \\\\dots a_n<\/script>，需要支持两种操作：</p>\\n<ul>\\n<li><code>Q l r k</code> 表示查询下标在区间 <script type=\\"math/tex\\">[l,r]<\/script> 中的第 <script type=\\"math/tex\\">k<\/script> 小的数</li>\\n<li><code>C x y</code> 表示将 <script type=\\"math/tex\\">a_x<\/script> 改为 <script type=\\"math/tex\\">y<\/script>\\n</li>\\n</ul>\\n<h2 id=\\"input\\">Input</h2>\\n<p>第一行两个正整数 <script type=\\"math/tex\\">n,m<\/script>，表示序列长度与操作个数。\\n第二行 <script type=\\"math/tex\\">n<\/script> 个整数，表示 <script type=\\"math/tex\\">a_1,a_2 \\\\dots a_n<\/script>。\\n接下来 <script type=\\"math/tex\\">m<\/script> 行，每行表示一个操作，都为上述两种中的一个。</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>对于每一次询问，输出一行一个整数表示答案。</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5 9\\n3 2 1 4 7\\n\\nQ 1 4 1\\nQ 2 4 3\\nQ 1 1 1\\n\\nC 2 6\\nC 3 0\\n\\nQ 1 3 1\\nQ 1 2 2\\nQ 1 5 3\\nQ 2 5 3\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4\\n5\\n6\\n7</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>1\\n4\\n3\\n0\\n6\\n4\\n6\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>前置知识：树状数组、主席树</p>\\n<p>经典的带修第k大问题，采用树套树（树状数组套动态开点权值线段树）的做法。也看到有人用整体二分来写。</p>\\n<p>具体而言，同主席树的思路，只不过我们是用一个树状数组来维护 <script type=\\"math/tex\\">n<\/script> 棵动态开点的权值线段树，其中树状数组的第 <script type=\\"math/tex\\">i<\/script> 个代表一棵权值线段树 <script type=\\"math/tex\\">T^{(i)}<\/script>，这棵线段树上每一个区间节点 <script type=\\"math/tex\\">[L, R]<\/script> 上记录了原数组中下标属于 <script type=\\"math/tex\\">(i-lowbit(i), i]<\/script> 且值的 rank 在 <script type=\\"math/tex\\">[L, R]<\/script> 的元素个数。</p>\\n<p>时空复杂度都是 <script type=\\"math/tex\\">O(n \\\\log^2 n)<\/script>\\n</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">MAXN</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e5</span><span class=\\"o\\">+</span><span class=\\"mi\\">3</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"c1\\">// nvals &lt;= MAXN*2</span>\\n<span class=\\"c1\\">// modify1: 1+log2(2*nvals)</span>\\n<span class=\\"c1\\">// modify: (log2(MAXN)+1)*2*modify1</span>\\n<span class=\\"c1\\">// total: 2*MAXN*modify</span>\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">Node</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">v</span><span class=\\"p\\">,</span> <span class=\\"n\\">lc</span><span class=\\"p\\">,</span> <span class=\\"n\\">rc</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"mi\\">2</span><span class=\\"o\\">*</span><span class=\\"n\\">MAXN</span><span class=\\"o\\">*</span><span class=\\"p\\">((</span><span class=\\"kt\\">int</span><span class=\\"p\\">)</span><span class=\\"n\\">log2</span><span class=\\"p\\">(</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">)</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">*</span><span class=\\"mi\\">2</span><span class=\\"o\\">*</span><span class=\\"p\\">(</span><span class=\\"mi\\">1</span><span class=\\"o\\">+</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span><span class=\\"p\\">)</span><span class=\\"n\\">log2</span><span class=\\"p\\">(</span><span class=\\"mi\\">4</span><span class=\\"o\\">*</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">))];</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">nnodes</span><span class=\\"p\\">;</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">root</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">],</span> <span class=\\"n\\">b</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">],</span> <span class=\\"n\\">val</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"o\\">*</span><span class=\\"mi\\">2</span><span class=\\"p\\">],</span> <span class=\\"n\\">nvals</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">Query</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">q</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">b</span><span class=\\"p\\">,</span> <span class=\\"n\\">c</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"o\\">*</span><span class=\\"mi\\">2</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"kr\\">inline</span> <span class=\\"kt\\">int</span> <span class=\\"nf\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span> <span class=\\"k\\">return</span> <span class=\\"n\\">i</span><span class=\\"o\\">&amp;-</span><span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">void</span> <span class=\\"nf\\">modify1</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"o\\">*</span><span class=\\"n\\">p</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">qk</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">nvals</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"o\\">!*</span><span class=\\"n\\">p</span><span class=\\"p\\">)</span> <span class=\\"o\\">*</span><span class=\\"n\\">p</span> <span class=\\"o\\">=</span> <span class=\\"o\\">++</span><span class=\\"n\\">nnodes</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"o\\">*</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">v</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">==</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"k\\">break</span><span class=\\"p\\">;</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">qk</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">m</span><span class=\\"p\\">)</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"p\\">,</span> <span class=\\"n\\">p</span> <span class=\\"o\\">=</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"o\\">*</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">lc</span><span class=\\"p\\">;</span> \\n    <span class=\\"k\\">else</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">p</span> <span class=\\"o\\">=</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"o\\">*</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">rc</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">void</span> <span class=\\"nf\\">build</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">k</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">,</span> <span class=\\"n\\">val</span><span class=\\"o\\">+</span><span class=\\"n\\">nvals</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">j</span><span class=\\"p\\">))</span>\\n      <span class=\\"n\\">modify1</span><span class=\\"p\\">(</span><span class=\\"o\\">&amp;</span><span class=\\"n\\">root</span><span class=\\"p\\">[</span><span class=\\"n\\">j</span><span class=\\"p\\">],</span> <span class=\\"n\\">k</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">void</span> <span class=\\"nf\\">modify</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">k1</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">,</span> <span class=\\"n\\">val</span><span class=\\"o\\">+</span><span class=\\"n\\">nvals</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">k2</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">,</span> <span class=\\"n\\">val</span><span class=\\"o\\">+</span><span class=\\"n\\">nvals</span><span class=\\"p\\">,</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span>\\n    <span class=\\"n\\">modify1</span><span class=\\"p\\">(</span><span class=\\"o\\">&amp;</span><span class=\\"n\\">root</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">],</span> <span class=\\"n\\">k1</span><span class=\\"p\\">,</span> <span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">),</span> <span class=\\"n\\">modify1</span><span class=\\"p\\">(</span><span class=\\"o\\">&amp;</span><span class=\\"n\\">root</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">],</span> <span class=\\"n\\">k2</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">query</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">li</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">ri</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">k</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"k\\">static</span> <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">2</span><span class=\\"p\\">];</span>\\n  <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">].</span><span class=\\"n\\">resize</span><span class=\\"p\\">(</span><span class=\\"mi\\">0</span><span class=\\"p\\">),</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">1</span><span class=\\"p\\">].</span><span class=\\"n\\">resize</span><span class=\\"p\\">(</span><span class=\\"mi\\">0</span><span class=\\"p\\">);</span>\\n\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"n\\">li</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">].</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">root</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"n\\">ri</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">1</span><span class=\\"p\\">].</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">root</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]);</span>\\n\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">nvals</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">cnt</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span> <span class=\\"nl\\">p</span><span class=\\"p\\">:</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">1</span><span class=\\"p\\">])</span> <span class=\\"n\\">cnt</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">lc</span><span class=\\"p\\">].</span><span class=\\"n\\">v</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span> <span class=\\"nl\\">p</span><span class=\\"p\\">:</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">])</span> <span class=\\"n\\">cnt</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">lc</span><span class=\\"p\\">].</span><span class=\\"n\\">v</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">cnt</span> <span class=\\"o\\">&gt;=</span> <span class=\\"n\\">k</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"mi\\">2</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n        <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span><span class=\\"o\\">&amp;</span> <span class=\\"nl\\">p</span><span class=\\"p\\">:</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"n\\">p</span> <span class=\\"o\\">=</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">lc</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"k\\">else</span> <span class=\\"p\\">{</span>\\n      <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">k</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">cnt</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"mi\\">2</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n        <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"k\\">auto</span><span class=\\"o\\">&amp;</span> <span class=\\"nl\\">p</span><span class=\\"p\\">:</span> <span class=\\"n\\">pn</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"n\\">p</span> <span class=\\"o\\">=</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">rc</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"k\\">return</span> <span class=\\"n\\">val</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">];</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">m</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"o\\">+</span><span class=\\"n\\">i</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">val</span><span class=\\"p\\">[</span><span class=\\"n\\">nvals</span> <span class=\\"o\\">++</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">char</span> <span class=\\"n\\">op</span><span class=\\"p\\">[</span><span class=\\"mi\\">5</span><span class=\\"p\\">];</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">b</span><span class=\\"p\\">,</span> <span class=\\"n\\">c</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%s%d%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">op</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">b</span><span class=\\"p\\">);</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">op</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">]</span> <span class=\\"o\\">==</span> <span class=\\"sc\\">&#39;Q&#39;</span><span class=\\"p\\">)</span> <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">c</span><span class=\\"p\\">);</span>\\n    <span class=\\"k\\">else</span> <span class=\\"n\\">val</span><span class=\\"p\\">[</span><span class=\\"n\\">nvals</span> <span class=\\"o\\">++</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">b</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"p\\">{</span><span class=\\"n\\">op</span><span class=\\"p\\">[</span><span class=\\"mi\\">0</span><span class=\\"p\\">]</span> <span class=\\"o\\">==</span> <span class=\\"sc\\">&#39;Q&#39;</span> <span class=\\"o\\">?</span> <span class=\\"mi\\">1</span><span class=\\"o\\">:</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">b</span><span class=\\"p\\">,</span> <span class=\\"n\\">c</span><span class=\\"p\\">};</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">sort</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">,</span> <span class=\\"n\\">val</span><span class=\\"o\\">+</span><span class=\\"n\\">nvals</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">nvals</span> <span class=\\"o\\">=</span> <span class=\\"n\\">unique</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">,</span> <span class=\\"n\\">val</span><span class=\\"o\\">+</span><span class=\\"n\\">nvals</span><span class=\\"p\\">)</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">build</span><span class=\\"p\\">();</span>\\n\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">q</span><span class=\\"p\\">)</span> <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d</span><span class=\\"se\\">\\\\n</span><span class=\\"s\\">&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">query</span><span class=\\"p\\">(</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">b</span><span class=\\"p\\">,</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">c</span><span class=\\"p\\">));</span>\\n    <span class=\\"k\\">else</span> <span class=\\"n\\">modify</span><span class=\\"p\\">(</span><span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">a</span><span class=\\"p\\">,</span> <span class=\\"n\\">q</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">b</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"data structures","url":"/tags/data-structures"}],"title":"洛谷-P2617 Dynamic Rankings","updated_at":"2022-01-26T22:45:21+08:00","url":"/docs/data-structures/segment-tree/luogu-2617"}')}}]);
//# sourceMappingURL=chunk-2d0a3a87.c22b6a12.js.map