(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0bd406"],{"2acd":function(s){s.exports=JSON.parse('{"created_at":"2020-10-17T10:05:41+08:00","excerpt":"酷爱日料的小Z经常光顾学校东门外的回转寿司店。在这里，一盘盘寿司通过传送带依次呈现在小Z眼前。","html":"<p>酷爱日料的小Z经常光顾学校东门外的回转寿司店。在这里，一盘盘寿司通过传送带依次呈现在小Z眼前。</p>\\n<p>不同的寿司带给小Z的味觉感受是不一样的，我们定义小Z对每盘寿司都有一个满意度。</p>\\n<p>例如小Z酷爱三文鱼，他对一盘三文鱼寿司的满意度为 <script type=\\"math/tex\\">10<\/script>；小Z觉得金枪鱼没有什么味道，他对一盘金枪鱼寿司的满意度只有 <script type=\\"math/tex\\">5<\/script>；小Z最近看了电影《美人鱼》，被里面的八爪鱼恶心到了，所以他对一盘八爪鱼刺身的满意度是 <script type=\\"math/tex\\">−100<\/script>。</p>\\n<p>特别地，小Z是个著名的吃货，他吃回转寿司有一个习惯，我们称之为“狂吃不止”。具体地讲，当他吃掉传送带上的一盘寿司后，他会毫不犹豫地吃掉它后面的寿司，直到他不想再吃寿司了为止。</p>\\n<p>今天，小Z再次来到了这家回转寿司店，<script type=\\"math/tex\\">N<\/script> 盘寿司将依次经过他的面前。其中，小Z对第 <script type=\\"math/tex\\">i<\/script> 盘寿司的满意度为 <script type=\\"math/tex\\">a_i<\/script>。</p>\\n<p>小Z可以选择从哪盘寿司开始吃，也可以选择吃到哪盘寿司为止。他想知道共有多少种不同的选择，使得他的满意度之和不低于 <script type=\\"math/tex\\">L<\/script>，且不高于 <script type=\\"math/tex\\">R<\/script>。</p>\\n<p>注意，虽然这是回转寿司，但是我们不认为这是一个环上的问题，而是一条线上的问题。即，小Z能吃到的是输入序列的一个连续子序列；最后一盘转走之后，第一盘并不会再出现一次。</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>第一行三个正整数 <script type=\\"math/tex\\">N,L,R<\/script>，表示寿司盘数，满意度的下限和上限。\\n第二行包含 <script type=\\"math/tex\\">N<\/script> 个整数 <script type=\\"math/tex\\">a_i<\/script>，表示小Z对寿司的满意度。</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>一行一个整数，表示有多少种方案可以使得小Z的满意度之和不低于 <script type=\\"math/tex\\">L<\/script> 且不高于 <script type=\\"math/tex\\">R<\/script>。</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5 5 9\\n1 2 3 4 5\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>6\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>题意是求多少个不同的区间，其中元素的和属于 <script type=\\"math/tex\\">[L, R]<\/script>。我们可以固定区间的左端点，则可能的右端点为所有在该左端点右边的点，而可能的区间和为这些右端点到该左端点的“前缀和”。</p>\\n<p>例如元素为 <script type=\\"math/tex\\">1, 2, 3, 4<\/script>，则左端点为第一个元素时，可能的区间和为 <script type=\\"math/tex\\">1, 3, 6, 10<\/script>，若去掉第一个，其余都减去第一个的值后得到的恰为左端点为第二个元素可能的区间和。</p>\\n<p>于是可以离散化后，以元素值建线段树/树状数组，而这种方法将难以修改元素的值，但可以转而修改查询区间 <script type=\\"math/tex\\">[L, R]<\/script>。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;cstdio&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;vector&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;algorithm&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">typedef</span> <span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span> <span class=\\"n\\">ll</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">MAXN</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e5</span><span class=\\"o\\">+</span><span class=\\"mi\\">3</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span>\\n<span class=\\"n\\">ll</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">],</span> <span class=\\"n\\">sa</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">BIT</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n  <span class=\\"kr\\">inline</span> <span class=\\"kt\\">int</span> <span class=\\"nf\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span> <span class=\\"k\\">return</span> <span class=\\"n\\">i</span><span class=\\"o\\">&amp;-</span><span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">void</span> <span class=\\"nf\\">add</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"nf\\">sum</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">s</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">-=</span> <span class=\\"n\\">lowbit</span><span class=\\"p\\">(</span><span class=\\"n\\">i</span><span class=\\"p\\">))</span> <span class=\\"n\\">s</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">bit</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">s</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">bit</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">ll</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%lld%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">r</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">ll</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">val</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">reserve</span><span class=\\"p\\">(</span><span class=\\"n\\">n</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">a</span><span class=\\"o\\">+</span><span class=\\"n\\">i</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">sa</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">sa</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span> <span class=\\"o\\">+</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">push_back</span><span class=\\"p\\">(</span><span class=\\"n\\">sa</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]);</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">sort</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">());</span>\\n  <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">resize</span><span class=\\"p\\">(</span><span class=\\"n\\">unique</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">())</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">());</span>\\n\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">idx</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">(),</span> <span class=\\"n\\">sa</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">()</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">add</span><span class=\\"p\\">(</span><span class=\\"n\\">idx</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">ll</span> <span class=\\"n\\">ans</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">li</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">(),</span> <span class=\\"n\\">l</span><span class=\\"p\\">)</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">();</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">ri</span> <span class=\\"o\\">=</span> <span class=\\"n\\">upper_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">(),</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">();</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">idx</span> <span class=\\"o\\">=</span> <span class=\\"n\\">lower_bound</span><span class=\\"p\\">(</span><span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">end</span><span class=\\"p\\">(),</span> <span class=\\"n\\">sa</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">])</span> <span class=\\"o\\">-</span> <span class=\\"n\\">val</span><span class=\\"p\\">.</span><span class=\\"n\\">begin</span><span class=\\"p\\">()</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n      <span class=\\"n\\">ans</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">sum</span><span class=\\"p\\">(</span><span class=\\"n\\">ri</span><span class=\\"p\\">)</span> <span class=\\"o\\">-</span> <span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">sum</span><span class=\\"p\\">(</span><span class=\\"n\\">li</span><span class=\\"p\\">);</span>\\n      <span class=\\"n\\">bit</span><span class=\\"p\\">.</span><span class=\\"n\\">add</span><span class=\\"p\\">(</span><span class=\\"n\\">idx</span><span class=\\"p\\">,</span> <span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n      <span class=\\"n\\">l</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">],</span> <span class=\\"n\\">r</span> <span class=\\"o\\">+=</span> <span class=\\"n\\">a</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"p\\">}</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">ans</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"data structures","url":"/tags/data-structures"}],"title":"BJOI-2016 回转寿司","updated_at":"2020-10-17T10:05:41+08:00","url":"/docs/data-structures/segment-tree/luogu-5459"}')}}]);
//# sourceMappingURL=chunk-2d0bd406.11b1fa1a.js.map