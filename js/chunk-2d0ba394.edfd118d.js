(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0ba394"],{"35fb":function(s){s.exports=JSON.parse('{"created_at":"2020-07-29T16:27:47+08:00","excerpt":"小豆现在有一个数x，初始值为$1$。小豆有$Q$次操作，操作有两种类型:","html":"<p>小豆现在有一个数x，初始值为<script type=\\"math/tex\\">1<\/script>。小豆有<script type=\\"math/tex\\">Q<\/script>次操作，操作有两种类型:</p>\\n<p>\\n<script type=\\"math/tex\\">1\\\\; m<\/script>：<script type=\\"math/tex\\">x=x\\\\times m<\/script> 输出 <script type=\\"math/tex\\">x\\\\% mod<\/script>\\n</p>\\n<p>\\n<script type=\\"math/tex\\">2\\\\; pos<\/script>：<script type=\\"math/tex\\">x= x/<\/script>第<script type=\\"math/tex\\">pos<\/script>次操作所乘的数（保证第<script type=\\"math/tex\\">pos<\/script>次操作一定为类型1,对于每一个类型1的操作至多会被除一次）输出 <script type=\\"math/tex\\">x\\\\% mod<\/script>\\n</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>一共有<script type=\\"math/tex\\">t<\/script>组输入(<script type=\\"math/tex\\">t\\\\leq5<\/script>)</p>\\n<p>对于每一组输入,第一行是两个数字<script type=\\"math/tex\\">Q,mod<\/script>(<script type=\\"math/tex\\">Q\\\\leq100000,mod\\\\leq100000000<\/script>)</p>\\n<p>接下来<script type=\\"math/tex\\">Q<\/script>行，每一行为操作类型<script type=\\"math/tex\\">op<\/script>,操作编号或所乘的数字<script type=\\"math/tex\\">m<\/script>（保证所有的输入都是合法的）</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>对于每一个操作，输出一行，包含操作执行后的<script type=\\"math/tex\\">x\\\\%mod<\/script>的值</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"err\\">1</span>\\n<span class=\\"err\\">10 1000000000</span>\\n<span class=\\"err\\">1 2</span>\\n<span class=\\"err\\">2 1</span>\\n<span class=\\"err\\">1 2</span>\\n<span class=\\"err\\">1 10</span>\\n<span class=\\"err\\">2 3</span>\\n<span class=\\"err\\">2 4</span>\\n<span class=\\"err\\">1 6</span>\\n<span class=\\"err\\">1 7</span>\\n<span class=\\"err\\">1 12</span>\\n<span class=\\"err\\">2 7</span>\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"err\\">2</span>\\n<span class=\\"err\\">1</span>\\n<span class=\\"err\\">2</span>\\n<span class=\\"err\\">20</span>\\n<span class=\\"err\\">10</span>\\n<span class=\\"err\\">1</span>\\n<span class=\\"err\\">6</span>\\n<span class=\\"err\\">42</span>\\n<span class=\\"err\\">504</span>\\n<span class=\\"err\\">84</span>\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>把乘法除法都当成单点修改，每次查询就是求区间乘积，可以用线段树来完成。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;stdio.h&gt;</span><span class=\\"cp\\"></span>\\n\\n<span class=\\"cp\\">#define MAXN (400007)</span>\\n\\n<span class=\\"cp\\">#define left(i) (i&lt;&lt;1)</span>\\n<span class=\\"cp\\">#define right(i) ((i&lt;&lt;1)+1)</span>\\n\\n<span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span> <span class=\\"n\\">mod</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">Node</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">long</span> <span class=\\"kt\\">long</span> <span class=\\"n\\">val</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">qi</span><span class=\\"p\\">,</span> <span class=\\"n\\">qx</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"kt\\">void</span> <span class=\\"nf\\">build</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">r</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">p</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">val</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">,</span> <span class=\\"n\\">lc</span> <span class=\\"o\\">=</span> <span class=\\"n\\">left</span><span class=\\"p\\">(</span><span class=\\"n\\">p</span><span class=\\"p\\">),</span> <span class=\\"n\\">rc</span> <span class=\\"o\\">=</span> <span class=\\"n\\">right</span><span class=\\"p\\">(</span><span class=\\"n\\">p</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">build</span><span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span><span class=\\"p\\">,</span> <span class=\\"n\\">lc</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">build</span><span class=\\"p\\">(</span><span class=\\"n\\">m</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span><span class=\\"p\\">,</span> <span class=\\"n\\">rc</span><span class=\\"p\\">);</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">void</span> <span class=\\"nf\\">modify</span><span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">r</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">p</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">==</span> <span class=\\"n\\">r</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">l</span> <span class=\\"o\\">==</span> <span class=\\"n\\">qi</span><span class=\\"p\\">)</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">val</span> <span class=\\"o\\">=</span> <span class=\\"n\\">qx</span> <span class=\\"o\\">%</span> <span class=\\"n\\">mod</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">else</span> <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">qi</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">qi</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">,</span> <span class=\\"n\\">lc</span> <span class=\\"o\\">=</span> <span class=\\"n\\">left</span><span class=\\"p\\">(</span><span class=\\"n\\">p</span><span class=\\"p\\">),</span> <span class=\\"n\\">rc</span> <span class=\\"o\\">=</span> <span class=\\"n\\">right</span><span class=\\"p\\">(</span><span class=\\"n\\">p</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">modify</span><span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span><span class=\\"p\\">,</span> <span class=\\"n\\">lc</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">modify</span><span class=\\"p\\">(</span><span class=\\"n\\">m</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span><span class=\\"p\\">,</span> <span class=\\"n\\">rc</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">p</span><span class=\\"p\\">].</span><span class=\\"n\\">val</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">lc</span><span class=\\"p\\">].</span><span class=\\"n\\">val</span> <span class=\\"o\\">*</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"n\\">rc</span><span class=\\"p\\">].</span><span class=\\"n\\">val</span><span class=\\"p\\">)</span> <span class=\\"o\\">%</span> <span class=\\"n\\">mod</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">nt</span><span class=\\"p\\">,</span> <span class=\\"n\\">nq</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">nt</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">nt</span><span class=\\"o\\">--</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%lld&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">nq</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">mod</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">build</span><span class=\\"p\\">(</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">nq</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">nq</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">op</span><span class=\\"p\\">,</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n      <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">op</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">x</span><span class=\\"p\\">);</span>\\n      <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">op</span> <span class=\\"o\\">==</span> <span class=\\"mi\\">1</span><span class=\\"p\\">)</span>\\n        <span class=\\"n\\">qi</span> <span class=\\"o\\">=</span> <span class=\\"n\\">i</span><span class=\\"p\\">,</span> <span class=\\"n\\">qx</span> <span class=\\"o\\">=</span> <span class=\\"n\\">x</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">else</span>\\n        <span class=\\"n\\">qi</span> <span class=\\"o\\">=</span> <span class=\\"n\\">x</span><span class=\\"p\\">,</span> <span class=\\"n\\">qx</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n      <span class=\\"n\\">modify</span><span class=\\"p\\">(</span><span class=\\"mi\\">1</span><span class=\\"p\\">,</span> <span class=\\"n\\">nq</span><span class=\\"p\\">,</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n      <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%lld</span><span class=\\"se\\">\\\\n</span><span class=\\"s\\">&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">node</span><span class=\\"p\\">[</span><span class=\\"mi\\">1</span><span class=\\"p\\">].</span><span class=\\"n\\">val</span><span class=\\"p\\">);</span>\\n    <span class=\\"p\\">}</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":["data-structure","tricks"],"title":"TJOI-2018 数学计算","updated_at":"2020-07-29T16:27:47+08:00","url":"/docs/acm/segment-tree/luogu-4588"}')}}]);
//# sourceMappingURL=chunk-2d0ba394.edfd118d.js.map