(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d222ca8"],{cfb1:function(s){s.exports=JSON.parse('{"created_at":"2020-10-17T10:05:41+08:00","excerpt":"Young Teodor enjoys drawing. His favourite hobby is drawing segments with integer borders inside his huge $[1;m]$ segment. One day Teodor noticed that picture he just drawn has one interesting feature: there doesn\'t exist an integer point, that belongs each of segments in the picture. Having discovered this fact, Teodor decided to share it with Sasha.","html":"<p>Young Teodor enjoys drawing. His favourite hobby is drawing segments with integer borders inside his huge <script type=\\"math/tex\\">[1;m]<\/script> segment. One day Teodor noticed that picture he just drawn has one interesting feature: there doesn\'t exist an integer point, that belongs each of segments in the picture. Having discovered this fact, Teodor decided to share it with Sasha.</p>\\n<p>Sasha knows that Teodor likes to show off so he never trusts him. Teodor wants to prove that he can be trusted sometimes, so he decided to convince Sasha that there is no such integer point in his picture, which belongs to each segment. However Teodor is lazy person and neither wills to tell Sasha all coordinates of segments\' ends nor wills to tell him their amount, so he suggested Sasha to ask him series of questions \'Given the integer point <script type=\\"math/tex\\">x_{i}<\/script>, how many segments in Fedya\'s picture contain that point?\', promising to tell correct answers for this questions.</p>\\n<p>Both boys are very busy studying and don\'t have much time, so they ask you to find out how many questions can Sasha ask Teodor, that having only answers on his questions, Sasha can\'t be sure that Teodor isn\'t lying to him. Note that Sasha doesn\'t know amount of segments in Teodor\'s picture. Sure, Sasha is smart person and never asks about same point twice.</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>First line of input contains two integer numbers: <script type=\\"math/tex\\">n, m (1\\\\le n,m\\\\le 100000)<\/script> — amount of segments of Teodor\'s picture and maximal coordinate of point that Sasha can ask about.</p>\\n<p>\\n<script type=\\"math/tex\\">i<\/script>th of next <script type=\\"math/tex\\">n<\/script> lines contains two integer numbers <script type=\\"math/tex\\">l_{i}, r_{i} (1\\\\le l_{i}\\\\le r_{i}\\\\le m)<\/script> — left and right ends of <script type=\\"math/tex\\">i<\/script>th segment in the picture. Note that that left and right ends of segment can be the same point.</p>\\n<p>It is guaranteed that there is no integer point, that belongs to all segments.</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>Single line of output should contain one integer number <script type=\\"math/tex\\">k<\/script> — size of largest set <script type=\\"math/tex\\">(x_{i},cnt(x_{i}))<\/script> where all <script type=\\"math/tex\\">x_{i}<\/script> are different, <script type=\\"math/tex\\">1\\\\le x_{i}\\\\le m<\/script>, and <script type=\\"math/tex\\">cnt(x_{i})<\/script> is amount of segments, containing point with coordinate <script type=\\"math/tex\\">x_{i}<\/script>, such that one can\'t be sure that there doesn\'t exist point, belonging to all of segments in initial picture, if he knows only this set(and doesn\'t know <script type=\\"math/tex\\">n<\/script>).</p>\\n<h2 id=\\"sample-input\\">Sample Input</h2>\\n<p>Input 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>2 4\\n1 2\\n3 4\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Input 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1\\n2\\n3\\n4\\n5</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>4 6\\n1 3\\n2 3\\n4 6\\n5 6\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"sample-output\\">Sample Output</h2>\\n<p>Output 1:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>4\\n</code></pre></div>\\n</td></tr></table>\\n\\n<p>Output 2:</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre>1</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code>5\\n</code></pre></div>\\n</td></tr></table>\\n\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>易知，查询点中 <script type=\\"math/tex\\">(x_i, cnt(x_i))<\/script> 一定不存在一些点是关于 <script type=\\"math/tex\\">i<\/script> 先减后增的。故查询点一定是关于 <script type=\\"math/tex\\">i<\/script> 先增后减或单调递增或单调递减的，即答案是最长的满足这种性质的序列长度。</p>\\n<p>首先我们需要计算每个点的覆盖次数 <script type=\\"math/tex\\">cnt(x_i)<\/script>，这可用排序+堆实现，复杂度为 <script type=\\"math/tex\\">O(n\\\\log n)<\/script>。</p>\\n<p>类似最长上升子序列，我们可以枚举每个点i，求出 <script type=\\"math/tex\\">[1, i]<\/script> 中以点 <script type=\\"math/tex\\">i<\/script> 结尾的最长不减序列长度 <script type=\\"math/tex\\">f[i]<\/script>，以及 <script type=\\"math/tex\\">[i, m]<\/script> 中以点 <script type=\\"math/tex\\">i<\/script> 开头的最长不增序列长度 <script type=\\"math/tex\\">g[i]<\/script>，复杂度为 <script type=\\"math/tex\\">O(n\\\\log n)<\/script>。然后答案就是 <script type=\\"math/tex\\">\\\\max_i f[i]-g[i]-1<\/script>。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">INF</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e9</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">MAXN</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e5</span><span class=\\"o\\">+</span><span class=\\"mi\\">3</span><span class=\\"p\\">;</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">overlap</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">],</span> <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n<span class=\\"kt\\">int</span> <span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">],</span> <span class=\\"n\\">nlis</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">struct</span> <span class=\\"n\\">Span</span> <span class=\\"p\\">{</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span><span class=\\"p\\">;</span>\\n  <span class=\\"kt\\">bool</span> <span class=\\"k\\">operator</span><span class=\\"o\\">&lt;</span><span class=\\"p\\">(</span><span class=\\"k\\">const</span> <span class=\\"n\\">Span</span><span class=\\"o\\">&amp;</span> <span class=\\"n\\">o</span><span class=\\"p\\">)</span> <span class=\\"k\\">const</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">r</span> <span class=\\"o\\">&gt;</span> <span class=\\"n\\">o</span><span class=\\"p\\">.</span><span class=\\"n\\">r</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n<span class=\\"p\\">}</span> <span class=\\"n\\">span</span><span class=\\"p\\">[</span><span class=\\"n\\">MAXN</span><span class=\\"p\\">];</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">m</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">scanf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">span</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">l</span><span class=\\"p\\">,</span> <span class=\\"o\\">&amp;</span><span class=\\"n\\">span</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">].</span><span class=\\"n\\">r</span><span class=\\"p\\">);</span>\\n\\n  <span class=\\"n\\">sort</span><span class=\\"p\\">(</span><span class=\\"n\\">span</span><span class=\\"p\\">,</span> <span class=\\"n\\">span</span><span class=\\"o\\">+</span><span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"p\\">[](</span><span class=\\"n\\">Span</span><span class=\\"o\\">&amp;</span> <span class=\\"n\\">lhs</span><span class=\\"p\\">,</span> <span class=\\"n\\">Span</span><span class=\\"o\\">&amp;</span> <span class=\\"n\\">rhs</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">return</span> <span class=\\"n\\">lhs</span><span class=\\"p\\">.</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">rhs</span><span class=\\"p\\">.</span><span class=\\"n\\">l</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">});</span>\\n  <span class=\\"n\\">priority_queue</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">Span</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">pq</span><span class=\\"p\\">;</span>\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">si</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(;</span> <span class=\\"n\\">si</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">span</span><span class=\\"p\\">[</span><span class=\\"n\\">si</span><span class=\\"p\\">].</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span> <span class=\\"n\\">si</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n      <span class=\\"n\\">pq</span><span class=\\"p\\">.</span><span class=\\"n\\">push</span><span class=\\"p\\">(</span><span class=\\"n\\">span</span><span class=\\"p\\">[</span><span class=\\"n\\">si</span><span class=\\"p\\">]);</span>\\n    <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">pq</span><span class=\\"p\\">.</span><span class=\\"n\\">size</span><span class=\\"p\\">()</span> <span class=\\"o\\">&amp;&amp;</span> <span class=\\"n\\">pq</span><span class=\\"p\\">.</span><span class=\\"n\\">top</span><span class=\\"p\\">().</span><span class=\\"n\\">r</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">i</span><span class=\\"p\\">)</span> <span class=\\"n\\">pq</span><span class=\\"p\\">.</span><span class=\\"n\\">pop</span><span class=\\"p\\">();</span>\\n    <span class=\\"n\\">overlap</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">pq</span><span class=\\"p\\">.</span><span class=\\"n\\">size</span><span class=\\"p\\">();</span>\\n  <span class=\\"p\\">}</span>\\n\\n  <span class=\\"n\\">nlis</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span> <span class=\\"o\\">=</span> <span class=\\"n\\">overlap</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">nlis</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">m</span><span class=\\"p\\">]</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">else</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span> <span class=\\"o\\">&gt;</span> <span class=\\"n\\">nlis</span><span class=\\"p\\">)</span> <span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"o\\">++</span><span class=\\"n\\">nlis</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">INF</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">min</span><span class=\\"p\\">(</span><span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">],</span> <span class=\\"n\\">x</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">l</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n\\n  <span class=\\"n\\">nlis</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&gt;=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">--</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">x</span> <span class=\\"o\\">=</span> <span class=\\"n\\">overlap</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">];</span>\\n    <span class=\\"kt\\">int</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">,</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">nlis</span><span class=\\"p\\">;</span>\\n    <span class=\\"k\\">while</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">r</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"kt\\">int</span> <span class=\\"n\\">m</span> <span class=\\"o\\">=</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"n\\">r</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">)</span><span class=\\"o\\">/</span><span class=\\"mi\\">2</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">m</span><span class=\\"p\\">]</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">x</span><span class=\\"p\\">)</span> <span class=\\"n\\">l</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">else</span> <span class=\\"n\\">r</span> <span class=\\"o\\">=</span> <span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span> <span class=\\"o\\">&gt;</span> <span class=\\"n\\">nlis</span><span class=\\"p\\">)</span> <span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"o\\">++</span><span class=\\"n\\">nlis</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">INF</span><span class=\\"p\\">;</span>\\n    <span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">min</span><span class=\\"p\\">(</span><span class=\\"n\\">lis</span><span class=\\"p\\">[</span><span class=\\"n\\">l</span><span class=\\"o\\">+</span><span class=\\"mi\\">1</span><span class=\\"p\\">],</span> <span class=\\"n\\">x</span><span class=\\"p\\">);</span>\\n    <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">l</span> <span class=\\"o\\">+</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n  <span class=\\"p\\">}</span>\\n\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">ans</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;=</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n    <span class=\\"n\\">ans</span> <span class=\\"o\\">=</span> <span class=\\"n\\">max</span><span class=\\"p\\">(</span><span class=\\"n\\">ans</span><span class=\\"p\\">,</span> <span class=\\"n\\">f</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">+</span> <span class=\\"n\\">g</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">-</span> <span class=\\"mi\\">1</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">printf</span><span class=\\"p\\">(</span><span class=\\"s\\">&quot;%d&quot;</span><span class=\\"p\\">,</span> <span class=\\"n\\">ans</span><span class=\\"p\\">);</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"dp","url":"/tags/dp"}],"title":"CF-930C Teodor is not a liar!","updated_at":"2020-10-17T10:05:41+08:00","url":"/docs/acm/dp/cf-930c"}')}}]);
//# sourceMappingURL=chunk-2d222ca8.09076400.js.map