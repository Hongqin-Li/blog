(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d209b31"],{a9be:function(s){s.exports=JSON.parse('{"created_at":"2020-10-17T12:00:02+08:00","excerpt":"A binary matrix is called good if every even length square sub-matrix has an odd number of ones.","html":"<p>A binary matrix is called good if every even length square sub-matrix has an odd number of ones.</p>\\n<p>Given a binary matrix <script type=\\"math/tex\\">a<\/script> consisting of <script type=\\"math/tex\\">n<\/script> rows and <script type=\\"math/tex\\">m<\/script> columns, determine the minimum number of cells you need to change to make it good, or report that there is no way to make it good at all.</p>\\n<p>All the terms above have their usual meanings  refer to the Notes section for their formal definitions.</p>\\n<h2 id=\\"input\\">Input</h2>\\n<p>The first line of input contains two integers <script type=\\"math/tex\\">n<\/script> and <script type=\\"math/tex\\">m<\/script> (<script type=\\"math/tex\\">1 \\\\leq n \\\\leq m \\\\leq 10^6<\/script> and <script type=\\"math/tex\\">n\\\\cdot m \\\\leq 10^6<\/script>)  the number of rows and columns in <script type=\\"math/tex\\">a<\/script> , respectively.</p>\\n<p>The following <script type=\\"math/tex\\">n<\/script> lines each contain <script type=\\"math/tex\\">m<\/script> characters, each of which is one of 0 and 1. If the <script type=\\"math/tex\\">j<\/script>-th character on the <script type=\\"math/tex\\">i<\/script>-th line is 1, then <script type=\\"math/tex\\">a_{i,j} = 1<\/script>. Similarly, if the <script type=\\"math/tex\\">j<\/script>-th character on the <script type=\\"math/tex\\">i<\/script>-th line is 0, then <script type=\\"math/tex\\">a_{i,j} = 0<\/script>.</p>\\n<h2 id=\\"output\\">Output</h2>\\n<p>Output the minimum number of cells you need to change to make <script type=\\"math/tex\\">a<\/script> good, or output <script type=\\"math/tex\\">-1<\/script> if it\'s not possible at all.</p>\\n<h2 id=\\"solution\\">Solution</h2>\\n<p>状压 dp</p>\\n<p>首先注意到如果 <script type=\\"math/tex\\">m\\\\ge n\\\\ge 4<\/script> 的话，对于每一个 <script type=\\"math/tex\\">4\\\\times 4<\/script> 方格其中一定含有 4 个 <script type=\\"math/tex\\">2\\\\times 2<\/script> 的小方格，由奇偶性可知，其中 1 个数一定为偶。</p>\\n<p>于是只需考虑 <script type=\\"math/tex\\">n\\\\le 3<\/script> 的情况，采用状压的方法，<script type=\\"math/tex\\">f[i][j]<\/script> 为到 <script type=\\"math/tex\\">i<\/script> 列状态为 <script type=\\"math/tex\\">j<\/script> 的最少次数。</p>\\n<table class=\\"codehilitetable\\"><tr><td class=\\"linenos\\"><div class=\\"linenodiv\\"><pre> 1\\n 2\\n 3\\n 4\\n 5\\n 6\\n 7\\n 8\\n 9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45</pre></div></td><td class=\\"code\\"><div class=\\"codehilite\\"><pre><span></span><code><span class=\\"cp\\">#include</span> <span class=\\"cpf\\">&lt;bits/stdc++.h&gt;</span><span class=\\"cp\\"></span>\\n<span class=\\"k\\">using</span> <span class=\\"k\\">namespace</span> <span class=\\"n\\">std</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"k\\">typedef</span> <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"kt\\">int</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">vi</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">typedef</span> <span class=\\"n\\">vector</span><span class=\\"o\\">&lt;</span><span class=\\"n\\">vi</span><span class=\\"o\\">&gt;</span> <span class=\\"n\\">vii</span><span class=\\"p\\">;</span>\\n<span class=\\"k\\">const</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">INF</span> <span class=\\"o\\">=</span> <span class=\\"mf\\">1e9</span><span class=\\"p\\">;</span>\\n\\n<span class=\\"kt\\">int</span> <span class=\\"nf\\">main</span><span class=\\"p\\">()</span> <span class=\\"p\\">{</span>\\n  <span class=\\"n\\">ios</span><span class=\\"o\\">::</span><span class=\\"n\\">sync_with_stdio</span><span class=\\"p\\">(</span><span class=\\"nb\\">false</span><span class=\\"p\\">);</span>\\n  <span class=\\"n\\">cin</span><span class=\\"p\\">.</span><span class=\\"n\\">tie</span><span class=\\"p\\">(</span><span class=\\"k\\">nullptr</span><span class=\\"p\\">);</span>\\n\\n  <span class=\\"kt\\">int</span> <span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n  <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">n</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">n</span> <span class=\\"o\\">&gt;=</span> <span class=\\"mi\\">4</span><span class=\\"p\\">)</span> <span class=\\"n\\">cout</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"s\\">&quot;-1&quot;</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">else</span> <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">n</span> <span class=\\"o\\">==</span> <span class=\\"mi\\">1</span> <span class=\\"o\\">||</span> <span class=\\"n\\">m</span> <span class=\\"o\\">==</span> <span class=\\"mi\\">1</span><span class=\\"p\\">)</span> <span class=\\"n\\">cout</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"s\\">&quot;0&quot;</span><span class=\\"p\\">;</span>\\n  <span class=\\"k\\">else</span> <span class=\\"p\\">{</span>\\n    <span class=\\"n\\">vi</span> <span class=\\"n\\">v</span><span class=\\"p\\">(</span><span class=\\"n\\">m</span><span class=\\"p\\">,</span> <span class=\\"mi\\">0</span><span class=\\"p\\">);</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"n\\">string</span> <span class=\\"n\\">s</span><span class=\\"p\\">;</span>\\n      <span class=\\"n\\">cin</span> <span class=\\"o\\">&gt;&gt;</span> <span class=\\"n\\">s</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span>\\n        <span class=\\"n\\">v</span><span class=\\"p\\">[</span><span class=\\"n\\">j</span><span class=\\"p\\">]</span> <span class=\\"o\\">|=</span> <span class=\\"p\\">(</span><span class=\\"n\\">s</span><span class=\\"p\\">[</span><span class=\\"n\\">j</span><span class=\\"p\\">]</span> <span class=\\"o\\">-</span> <span class=\\"sc\\">&#39;0&#39;</span><span class=\\"p\\">)</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"n\\">i</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"n\\">vii</span> <span class=\\"n\\">dp</span><span class=\\"p\\">(</span><span class=\\"n\\">m</span><span class=\\"p\\">,</span> <span class=\\"n\\">vi</span><span class=\\"p\\">(</span><span class=\\"mi\\">1</span><span class=\\"o\\">&lt;&lt;</span><span class=\\"n\\">n</span><span class=\\"p\\">,</span> <span class=\\"n\\">INF</span><span class=\\"p\\">));</span>\\n    <span class=\\"k\\">auto</span> <span class=\\"n\\">valid</span> <span class=\\"o\\">=</span> <span class=\\"p\\">[</span><span class=\\"o\\">&amp;</span><span class=\\"p\\">](</span><span class=\\"kt\\">int</span> <span class=\\"n\\">s1</span><span class=\\"p\\">,</span> <span class=\\"kt\\">int</span> <span class=\\"n\\">s2</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">n</span> <span class=\\"o\\">==</span> <span class=\\"mi\\">2</span><span class=\\"p\\">)</span>\\n        <span class=\\"k\\">return</span> <span class=\\"p\\">(</span><span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">s1</span><span class=\\"p\\">)</span> <span class=\\"o\\">+</span> <span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">s2</span><span class=\\"p\\">))</span> <span class=\\"o\\">&amp;</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n      <span class=\\"k\\">return</span> <span class=\\"p\\">(</span><span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">s1</span><span class=\\"o\\">&amp;</span><span class=\\"mi\\">3</span><span class=\\"p\\">)</span> <span class=\\"o\\">+</span> <span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">s2</span><span class=\\"o\\">&amp;</span><span class=\\"mi\\">3</span><span class=\\"p\\">))</span> <span class=\\"o\\">&amp;</span>\\n             <span class=\\"p\\">(</span><span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">s1</span><span class=\\"o\\">&amp;</span><span class=\\"mi\\">6</span><span class=\\"p\\">)</span> <span class=\\"o\\">+</span> <span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">s2</span><span class=\\"o\\">&amp;</span><span class=\\"mi\\">6</span><span class=\\"p\\">))</span> <span class=\\"o\\">&amp;</span> <span class=\\"mi\\">1</span><span class=\\"p\\">;</span>\\n    <span class=\\"p\\">};</span>\\n    <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">i</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">&lt;</span> <span class=\\"n\\">m</span><span class=\\"p\\">;</span> <span class=\\"n\\">i</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n      <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">j</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">&lt;</span> <span class=\\"mi\\">1</span><span class=\\"o\\">&lt;&lt;</span><span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">j</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n        <span class=\\"k\\">for</span> <span class=\\"p\\">(</span><span class=\\"kt\\">int</span> <span class=\\"n\\">k</span> <span class=\\"o\\">=</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span> <span class=\\"n\\">k</span> <span class=\\"o\\">&lt;</span> <span class=\\"mi\\">1</span><span class=\\"o\\">&lt;&lt;</span><span class=\\"n\\">n</span><span class=\\"p\\">;</span> <span class=\\"n\\">k</span> <span class=\\"o\\">++</span><span class=\\"p\\">)</span> <span class=\\"p\\">{</span>\\n          <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">i</span> <span class=\\"o\\">==</span> <span class=\\"mi\\">0</span><span class=\\"p\\">)</span>\\n            <span class=\\"n\\">dp</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">][</span><span class=\\"n\\">j</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">v</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">^</span> <span class=\\"n\\">j</span><span class=\\"p\\">);</span>\\n          <span class=\\"k\\">else</span> <span class=\\"k\\">if</span> <span class=\\"p\\">(</span><span class=\\"n\\">valid</span><span class=\\"p\\">(</span><span class=\\"n\\">j</span><span class=\\"p\\">,</span> <span class=\\"n\\">k</span><span class=\\"p\\">))</span>\\n            <span class=\\"n\\">dp</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">][</span><span class=\\"n\\">j</span><span class=\\"p\\">]</span> <span class=\\"o\\">=</span> <span class=\\"n\\">min</span><span class=\\"p\\">(</span><span class=\\"n\\">dp</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">][</span><span class=\\"n\\">j</span><span class=\\"p\\">],</span> <span class=\\"n\\">dp</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">][</span><span class=\\"n\\">k</span><span class=\\"p\\">]</span> <span class=\\"o\\">+</span>\\n                           <span class=\\"n\\">__builtin_popcount</span><span class=\\"p\\">(</span><span class=\\"n\\">v</span><span class=\\"p\\">[</span><span class=\\"n\\">i</span><span class=\\"p\\">]</span> <span class=\\"o\\">^</span> <span class=\\"n\\">j</span><span class=\\"p\\">));</span>\\n        <span class=\\"p\\">}</span>\\n      <span class=\\"p\\">}</span>\\n    <span class=\\"p\\">}</span>\\n    <span class=\\"n\\">cout</span> <span class=\\"o\\">&lt;&lt;</span> <span class=\\"o\\">*</span><span class=\\"n\\">min_element</span><span class=\\"p\\">(</span><span class=\\"n\\">dp</span><span class=\\"p\\">[</span><span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">].</span><span class=\\"n\\">begin</span><span class=\\"p\\">(),</span> <span class=\\"n\\">dp</span><span class=\\"p\\">[</span><span class=\\"n\\">m</span><span class=\\"o\\">-</span><span class=\\"mi\\">1</span><span class=\\"p\\">].</span><span class=\\"n\\">end</span><span class=\\"p\\">());</span>\\n  <span class=\\"p\\">}</span>\\n  <span class=\\"k\\">return</span> <span class=\\"mi\\">0</span><span class=\\"p\\">;</span>\\n<span class=\\"p\\">}</span>\\n</code></pre></div>\\n</td></tr></table>","tags":[{"name":"dp","url":"/tags/dp"}],"title":"CF-1391D 505","updated_at":"2020-10-17T12:00:02+08:00","url":"/docs/dp/bitmask-dp/cf-1391d"}')}}]);
//# sourceMappingURL=chunk-2d209b31.0554a884.js.map